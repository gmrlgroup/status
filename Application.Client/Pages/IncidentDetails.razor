@page "/incidents/{IncidentId}"
@using Application.Shared.Models
@using Application.Shared.Services
@using Application.Shared.Enums
@using Microsoft.FluentUI.AspNetCore.Components
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))
@inject HttpClient _httpClient
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject IDialogService DialogService
@attribute [Authorize]

<PageTitle>Incident Details - @(incident?.Title ?? "Loading...")</PageTitle>

<div class="min-h-screen bg-gray-50">
    @if (isLoading)
    {
        <div class="flex justify-center items-center h-64">
            <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-red-600"></div>
        </div>
    }
    else if (incident == null)
    {
        <div class="text-center py-12">
            <h3 class="text-lg font-medium text-gray-900">Incident not found</h3>
            <p class="mt-2 text-sm text-gray-500">The incident you're looking for doesn't exist.</p>
            <div class="mt-6">
                <button @onclick="BackToIncidents" 
                        class="inline-flex items-center px-4 py-2 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-red-600 hover:bg-red-700">
                    Back to Incidents
                </button>
            </div>
        </div>
    }
    else
    {
        <!-- Header -->
        <div class="bg-white border-b border-gray-200">
            <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
                <div class="py-6">
                    <nav class="flex" aria-label="Breadcrumb">
                        <ol class="flex items-center space-x-4">
                            <li>
                                <div>
                                    <button @onclick="BackToIncidents" class="text-gray-400 hover:text-gray-500">
                                        <svg class="flex-shrink-0 h-5 w-5" fill="currentColor" viewBox="0 0 20 20">
                                            <path fill-rule="evenodd" d="M9.707 14.707a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 1.414L7.414 9H15a1 1 0 110 2H7.414l2.293 2.293a1 1 0 010 1.414z" clip-rule="evenodd"></path>
                                        </svg>
                                        <span class="sr-only">Back</span>
                                    </button>
                                </div>
                            </li>
                            <li>
                                <div class="flex items-center">
                                    <svg class="flex-shrink-0 h-5 w-5 text-gray-300" fill="currentColor" viewBox="0 0 20 20">
                                        <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 111.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd"></path>
                                    </svg>
                                    <button @onclick="BackToIncidents" class="ml-4 text-sm font-medium text-gray-500 hover:text-gray-700">
                                        Incidents
                                    </button>
                                </div>
                            </li>
                            <li>
                                <div class="flex items-center">
                                    <svg class="flex-shrink-0 h-5 w-5 text-gray-300" fill="currentColor" viewBox="0 0 20 20">
                                        <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 111.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd"></path>
                                    </svg>
                                    <span class="ml-4 text-sm font-medium text-gray-500 truncate">
                                        @incident.Title
                                    </span>
                                </div>
                            </li>
                        </ol>
                    </nav>
                    
                    <div class="mt-6 md:flex md:items-center md:justify-between">
                        <div class="flex-1 min-w-0 flex items-center">
                            <span class="text-2xl mr-3">@incident.GetSeverityIcon()</span>
                            <div>
                                <h1 class="text-2xl font-bold leading-7 text-gray-900 sm:text-3xl sm:truncate">
                                    @incident.Title
                                </h1>
                                <div class="mt-1 flex flex-col sm:flex-row sm:flex-wrap sm:mt-0 sm:space-x-6">
                                    <div class="mt-2 flex items-center text-sm text-gray-500">
                                        <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium @incident.GetSeverityClass() mr-2">
                                            @incident.Severity
                                        </span>
                                        <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium @incident.GetStatusClass()">
                                            @incident.Status
                                        </span>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="mt-4 flex md:mt-0 md:ml-4 space-x-3">
                            <button @onclick="OpenAddUpdateDialog" 
                                    class="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700">
                                <svg class="-ml-1 mr-2 h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                                </svg>
                                Add Update
                            </button>
                            @if (incident.Status != IncidentStatus.Resolved)
                            {
                                <button @onclick="() => ShowStatusUpdateModal = true" 
                                        class="inline-flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50">
                                    Update Status
                                </button>
                                <button @onclick="() => ShowResolveModal = true" 
                                        class="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-gray-700 bg-green-600 hover:bg-green-700">
                                    Resolve
                                </button>
                            }
                            <button @onclick="EditIncident" 
                                    class="inline-flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50">
                                <svg class="-ml-1 mr-2 h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
                                </svg>
                                Edit
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Main Content -->
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
            <div class="grid grid-cols-1 gap-6 lg:grid-cols-3">
                <!-- Main Details -->
                <div class="lg:col-span-2">
                    <div class="bg-white shadow sm:rounded-lg mb-6">
                        <div class="px-4 py-5 sm:p-6">
                            <h3 class="text-lg leading-6 font-medium text-gray-900 mb-4">Incident Details</h3>
                            
                            <dl class="grid grid-cols-1 gap-x-4 gap-y-6 sm:grid-cols-2">
                                <div>
                                    <dt class="text-sm font-medium text-gray-500">Affected Entity</dt>
                                    <dd class="mt-1 text-sm text-gray-900">
                                        @if (incident.Entity != null)
                                        {
                                            <span class="inline-flex items-center">
                                                <span class="mr-2">@incident.Entity.GetEntityTypeIcon()</span>
                                                @incident.Entity.Name
                                                <span class="ml-2 inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium @incident.Entity.GetEntityTypeClass()">
                                                    @incident.Entity.EntityType
                                                </span>
                                            </span>
                                        }
                                        else
                                        {
                                            <span class="text-gray-500">Unknown</span>
                                        }
                                    </dd>
                                </div>

                                <div>
                                    <dt class="text-sm font-medium text-gray-500">Duration</dt>
                                    <dd class="mt-1 text-sm text-gray-900">
                                        @if (incident.IsResolved)
                                        {
                                            <span>@FormatDuration(incident.Duration) (Resolved)</span>
                                        }
                                        else
                                        {
                                            <span>@FormatDuration(incident.Duration) (Ongoing)</span>
                                        }
                                    </dd>
                                </div>

                                <div>
                                    <dt class="text-sm font-medium text-gray-500">Started</dt>
                                    <dd class="mt-1 text-sm text-gray-900">@incident.StartedAt.Value.ToString("MMM dd, yyyy 'at' h:mm tt")</dd>
                                </div>

                                @if (incident.ResolvedAt.HasValue)
                                {
                                    <div>
                                        <dt class="text-sm font-medium text-gray-500">Resolved</dt>
                                        <dd class="mt-1 text-sm text-gray-900">@incident.ResolvedAt.Value.ToString("MMM dd, yyyy 'at' h:mm tt")</dd>
                                    </div>
                                }

                                @if (!string.IsNullOrEmpty(incident.ReportedBy))
                                {
                                    <div>
                                        <dt class="text-sm font-medium text-gray-500">Reported By</dt>
                                        <dd class="mt-1 text-sm text-gray-900">@incident.ReportedBy</dd>
                                    </div>
                                }

                                @if (!string.IsNullOrEmpty(incident.AssignedTo))
                                {
                                    <div>
                                        <dt class="text-sm font-medium text-gray-500">Assigned To</dt>
                                        <dd class="mt-1 text-sm text-gray-900">@incident.AssignedTo</dd>
                                    </div>
                                }

                                @if (!string.IsNullOrEmpty(incident.ExternalIncidentId))
                                {
                                    <div class="sm:col-span-2">
                                        <dt class="text-sm font-medium text-gray-500">External Reference</dt>
                                        <dd class="mt-1 text-sm text-gray-900">@incident.ExternalIncidentId</dd>
                                    </div>
                                }
                            </dl>

                            <div class="mt-6">
                                <dt class="text-sm font-medium text-gray-500">Description</dt>
                                <dd class="mt-1 text-sm text-gray-900">@incident.Description</dd>
                            </div>

                            @if (!string.IsNullOrEmpty(incident.ImpactDescription))
                            {
                                <div class="mt-6">
                                    <dt class="text-sm font-medium text-gray-500">Impact</dt>
                                    <dd class="mt-1 text-sm text-gray-900">@incident.ImpactDescription</dd>
                                </div>
                            }

                            @if (!string.IsNullOrEmpty(incident.ResolutionDetails))
                            {
                                <div class="mt-6">
                                    <dt class="text-sm font-medium text-gray-500">Resolution</dt>
                                    <dd class="mt-1 text-sm text-gray-900">@incident.ResolutionDetails</dd>
                                </div>
                            }
                        </div>
                    </div>

                    <!-- Updates Section -->
                    <div class="bg-white shadow sm:rounded-lg">
                        <div class="px-4 py-5 sm:p-6">
                            <div class="flex items-center justify-between mb-4">
                                <h3 class="text-lg leading-6 font-medium text-gray-900">Updates</h3>
                                <button @onclick="OpenAddUpdateDialog" 
                                        class="inline-flex items-center px-3 py-2 border border-transparent text-sm leading-4 font-medium rounded-md text-red-700 bg-red-100 hover:bg-red-200">
                                    Add Update
                                </button>
                            </div>

                            @if (incidentUpdates?.Any() == true)
                            {
                                <div class="flow-root">
                                    <ul class="-mb-8">
                                        @for (int i = 0; i < incidentUpdates.Count; i++)
                                        {
                                            var update = incidentUpdates[i];
                                            <li>
                                                <div class="relative pb-8">
                                                    @if (i != incidentUpdates.Count - 1)
                                                    {
                                                        <span class="absolute top-4 left-4 -ml-px h-full w-0.5 bg-gray-200" aria-hidden="true"></span>
                                                    }
                                                    <div class="relative flex space-x-3">
                                                        <div>
                                                            <span class="h-8 w-8 rounded-full bg-red-500 flex items-center justify-center ring-8 ring-white">
                                                                @if (update.StatusChange.HasValue)
                                                                {
                                                                    <svg class="h-5 w-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                                                                    </svg>
                                                                }
                                                                else
                                                                {
                                                                    <svg class="h-5 w-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-3.582 8-8 8a8.001 8.001 0 01-7.999-8c0-4.418 3.582-8 8-8s8 3.582 8 8z"></path>
                                                                    </svg>
                                                                }
                                                            </span>
                                                        </div>
                                                        <div class="min-w-0 flex-1 pt-1.5 flex justify-between space-x-4">
                                                            <div>
                                                                @if (update.StatusChange.HasValue)
                                                                {
                                                                    <p class="text-sm text-gray-500 mb-1">
                                                                        Status changed to 
                                                                        <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium @GetStatusClass(update.StatusChange.Value)">
                                                                            @update.StatusChange.Value
                                                                        </span>
                                                                    </p>
                                                                }
                                                                <p class="text-sm text-gray-900">@update.Message</p>
                                                                <p class="text-xs text-gray-500 mt-1">
                                                                    by @(update.Author ?? "System") • @update.PostedAt.ToString("MMM dd, yyyy 'at' h:mm tt")
                                                                </p>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </li>
                                        }
                                    </ul>
                                </div>
                            }
                            else
                            {
                                <div class="text-center py-6">
                                    <p class="text-sm text-gray-500">No updates yet.</p>
                                </div>
                            }
                        </div>
                    </div>
                </div>

                <!-- Sidebar -->
                <div class="lg:col-span-1">
                    <div class="bg-white shadow sm:rounded-lg">
                        <div class="px-4 py-5 sm:p-6">
                            <h3 class="text-lg leading-6 font-medium text-gray-900 mb-4">Quick Actions</h3>
                            <div class="space-y-3">
                                @if (incident.Status != IncidentStatus.Resolved)
                                {
                                    <button @onclick="() => UpdateStatus(IncidentStatus.Investigating)" 
                                            class="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-yellow-600 hover:bg-yellow-700">
                                        Mark as Investigating
                                    </button>
                                    <button @onclick="() => UpdateStatus(IncidentStatus.Identified)" 
                                            class="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700">
                                        Mark as Identified
                                    </button>
                                    <button @onclick="() => UpdateStatus(IncidentStatus.Monitoring)" 
                                            class="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-purple-600 hover:bg-purple-700">
                                        Mark as Monitoring
                                    </button>
                                }
                                @if (incident.Entity != null)
                                {
                                    <button @onclick="() => ViewEntity(incident.EntityId)" 
                                            class="w-full flex justify-center py-2 px-4 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50">
                                        View Entity Details
                                    </button>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

<!-- Status Update Modal -->
@if (ShowStatusUpdateModal)
{
    <FluentDialog>
        <div class="bg-white rounded-lg shadow-xl max-w-lg w-full">
            <!-- Header -->
            <div class="flex items-center justify-between p-6 border-b border-gray-200 bg-gray-50 rounded-t-lg">
                <div class="flex items-center space-x-3">
                    <div class="w-10 h-10 bg-orange-100 rounded-full flex items-center justify-center">
                        <svg class="w-6 h-6 text-orange-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
                        </svg>
                    </div>
                    <div>
                        <h3 class="text-lg font-semibold text-gray-900">Update Status</h3>
                        <p class="text-sm text-gray-500">Change the incident status and add an update</p>
                    </div>
                </div>
            </div>

            <!-- Body -->
            <div class="p-6">
                <EditForm Model="statusUpdateModel" OnValidSubmit="HandleStatusUpdate">
                    <div class="space-y-4">
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">
                                New Status
                            </label>
                            <FluentSelect @bind-Value="selectedStatusString" 
                                         TOption="string"
                                         Class="w-full">
                                <FluentOption Value="Open" TOption="string">Open</FluentOption>
                                <FluentOption Value="Investigating" TOption="string">Investigating</FluentOption>
                                <FluentOption Value="Identified" TOption="string">Identified</FluentOption>
                                <FluentOption Value="Monitoring" TOption="string">Monitoring</FluentOption>
                                <FluentOption Value="Resolved" TOption="string">Resolved</FluentOption>
                            </FluentSelect>
                        </div>
                        
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">
                                Update Message
                            </label>
                            <FluentTextArea @bind-Value="statusUpdateModel.Message"
                                            Rows="3"
                                            Placeholder="Enter status update details..."
                                            Class="w-full" />
                        </div>
                        
                        <div class="bg-orange-50 rounded-lg p-4 border border-orange-200">
                            <div class="flex items-start space-x-3">
                                <div class="flex-shrink-0">
                                    <svg class="w-5 h-5 text-orange-500 mt-0.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                                    </svg>
                                </div>
                                <div class="flex-1 min-w-0">
                                    <p class="text-sm text-orange-700">
                                        This will update the incident status and post a timeline entry with your message.
                                    </p>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Footer -->
                    <div class="flex justify-end space-x-3 pt-6 mt-6 border-t border-gray-200">
                        <FluentButton Appearance="Appearance.Neutral"
                                      @onclick="() => ShowStatusUpdateModal = false"
                                      Class="px-4 py-2 text-sm font-medium text-gray-700 bg-gray-100 rounded-md hover:bg-gray-200 transition-colors">
                            Cancel
                        </FluentButton>
                        <FluentButton Appearance="Appearance.Accent"
                                      Type="ButtonType.Submit"
                                      Class="px-4 py-2 text-sm font-medium text-white bg-orange-600 rounded-md hover:bg-orange-700 transition-colors">
                            Update Status
                        </FluentButton>
                    </div>
                </EditForm>
            </div>
        </div>
    </FluentDialog>
}

<!-- Resolve Modal -->
@if (ShowResolveModal)
{
    <FluentDialog>
        <div class="bg-white rounded-lg shadow-xl max-w-lg w-full">
            <!-- Header -->
            <div class="flex items-center justify-between p-6 border-b border-gray-200 bg-gray-50 rounded-t-lg">
                <div class="flex items-center space-x-3">
                    <div class="w-10 h-10 bg-green-100 rounded-full flex items-center justify-center">
                        <svg class="w-6 h-6 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                        </svg>
                    </div>
                    <div>
                        <h3 class="text-lg font-semibold text-gray-900">Resolve Incident</h3>
                        <p class="text-sm text-gray-500">Mark this incident as resolved with details</p>
                    </div>
                </div>
            </div>

            <!-- Body -->
            <div class="p-6">
                <EditForm Model="resolveModel" OnValidSubmit="HandleResolve">
                    <div class="space-y-4">
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">
                                Resolution Details
                            </label>
                            <FluentTextArea @bind-Value="resolveModel.ResolutionDetails"
                                            Rows="4"
                                            Placeholder="Describe how the incident was resolved..."
                                            Class="w-full"
                                            Required="true" />
                        </div>
                        
                        <div class="bg-green-50 rounded-lg p-4 border border-green-200">
                            <div class="flex items-start space-x-3">
                                <div class="flex-shrink-0">
                                    <svg class="w-5 h-5 text-green-500 mt-0.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                                    </svg>
                                </div>
                                <div class="flex-1 min-w-0">
                                    <p class="text-sm text-green-700">
                                        This will permanently mark the incident as resolved and record the resolution details.
                                    </p>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Footer -->
                    <div class="flex justify-end space-x-3 pt-6 mt-6 border-t border-gray-200">
                        <FluentButton Appearance="Appearance.Neutral"
                                      @onclick="() => ShowResolveModal = false"
                                      Class="px-4 py-2 text-sm font-medium text-gray-700 bg-gray-100 rounded-md hover:bg-gray-200 transition-colors">
                            Cancel
                        </FluentButton>
                        <FluentButton Appearance="Appearance.Accent"
                                      Type="ButtonType.Submit"
                                      Disabled="string.IsNullOrWhiteSpace(resolveModel.ResolutionDetails)"
                                      Class="px-4 py-2 text-sm font-medium text-white bg-green-600 rounded-md hover:bg-green-700 transition-colors">
                            Resolve Incident
                        </FluentButton>
                    </div>
                </EditForm>
            </div>
        </div>
    </FluentDialog>
}

@code {
    [Parameter] public string IncidentId { get; set; } = string.Empty;
    [SupplyParameterFromQuery(Name = "w")] public string? WorkspaceId { get; set; }

    private Incident? incident;
    private List<IncidentUpdate>? incidentUpdates;
    private bool isLoading = true;

    // Modal state
    private bool ShowStatusUpdateModal = false;
    private bool ShowResolveModal = false;
    private bool ShowAddUpdateModal = false;

    // Modal models
    private StatusUpdateModel statusUpdateModel = new();
    private ResolveModel resolveModel = new();
    private UpdateModel updateModel = new();

    // Helper property for FluentSelect binding
    private string selectedStatusString
    {
        get => statusUpdateModel.Status.ToString();
        set => statusUpdateModel.Status = Enum.Parse<IncidentStatus>(value);
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadIncident();
        await LoadIncidentUpdates();
    }

    private async Task LoadIncident()
    {
        // Add workspace header
        if (!_httpClient.DefaultRequestHeaders.Contains("X-Workspace-ID"))
        {
            _httpClient.DefaultRequestHeaders.Add("X-Workspace-ID", WorkspaceId ?? "default-workspace");
        }

        try
        {
            isLoading = true;
            var response = await _httpClient.GetAsync($"api/incidents/{IncidentId}");
            
            if (response.IsSuccessStatusCode)
            {
                incident = await response.Content.ReadFromJsonAsync<Incident>();
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", "Error loading incident:", ex.Message);
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadIncidentUpdates()
    {
        // Add workspace header
        if (!_httpClient.DefaultRequestHeaders.Contains("X-Workspace-ID"))
        {
            _httpClient.DefaultRequestHeaders.Add("X-Workspace-ID", WorkspaceId ?? "default-workspace");
        }

        try
        {
            var response = await _httpClient.GetAsync($"api/incidents/{IncidentId}/updates");
            
            if (response.IsSuccessStatusCode)
            {
                incidentUpdates = await response.Content.ReadFromJsonAsync<List<IncidentUpdate>>();
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", "Error loading incident updates:", ex.Message);
        }
    }

    private async Task UpdateStatus(IncidentStatus status)
    {
        statusUpdateModel.Status = status;
        statusUpdateModel.Message = $"Status changed to {status}";
        await HandleStatusUpdate();
    }

    private async Task HandleStatusUpdate()
    {
        // Add workspace header
        if (!_httpClient.DefaultRequestHeaders.Contains("X-Workspace-ID"))
        {
            _httpClient.DefaultRequestHeaders.Add("X-Workspace-ID", WorkspaceId ?? "default-workspace");
        }

        try
        {
            var response = await _httpClient.PutAsJsonAsync($"api/incidents/{IncidentId}/status", statusUpdateModel);
            
            if (response.IsSuccessStatusCode)
            {
                ShowStatusUpdateModal = false;
                await LoadIncident();
                await LoadIncidentUpdates();
                statusUpdateModel = new();
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", "Error updating status:", ex.Message);
        }
    }

    private async Task HandleResolve()
    {
        // Add workspace header
        if (!_httpClient.DefaultRequestHeaders.Contains("X-Workspace-ID"))
        {
            _httpClient.DefaultRequestHeaders.Add("X-Workspace-ID", WorkspaceId ?? "default-workspace");
        }

        try
        {
            var response = await _httpClient.PutAsJsonAsync($"api/incidents/{IncidentId}/resolve", resolveModel);
            
            if (response.IsSuccessStatusCode)
            {
                ShowResolveModal = false;
                await LoadIncident();
                await LoadIncidentUpdates();
                resolveModel = new();
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", "Error resolving incident:", ex.Message);
        }
    }

    private async Task HandleAddUpdate()
    {
        // Add workspace header
        if (!_httpClient.DefaultRequestHeaders.Contains("X-Workspace-ID"))
        {
            _httpClient.DefaultRequestHeaders.Add("X-Workspace-ID", WorkspaceId ?? "default-workspace");
        }

        try
        {
            var response = await _httpClient.PostAsJsonAsync($"api/incidents/{IncidentId}/updates", updateModel);
            
            if (response.IsSuccessStatusCode)
            {
                await LoadIncidentUpdates();
                updateModel = new();
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", "Error adding update:", ex.Message);
        }
    }

    private void OpenAddUpdateDialog()
    {
        updateModel = new(); // Reset the model
        ShowAddUpdateModal = true;
    }

    private void CloseAddUpdateDialog()
    {
        ShowAddUpdateModal = false;
    }

    private async Task HandleAddUpdateFromDialog()
    {
        await HandleAddUpdate();
        CloseAddUpdateDialog();
    }

    private void EditIncident()
    {
        Navigation.NavigateTo($"/incidents/{IncidentId}/edit");
    }

    private void ViewEntity(string entityId)
    {
        Navigation.NavigateTo($"/entities/{entityId}");
    }

    private void BackToIncidents()
    {
        Navigation.NavigateTo("/incidents");
    }

    private string FormatDuration(TimeSpan? duration)
    {
        if (!duration.HasValue) return "0m";

        var d = duration.Value;
        if (d.TotalDays >= 1)
            return $"{(int)d.TotalDays}d {d.Hours}h";
        if (d.TotalHours >= 1)
            return $"{(int)d.TotalHours}h {d.Minutes}m";
        
        return $"{(int)d.TotalMinutes}m";
    }

    private string GetStatusClass(IncidentStatus status)
    {
        return status switch
        {
            IncidentStatus.Open => "bg-red-100 text-red-800",
            IncidentStatus.Investigating => "bg-yellow-100 text-yellow-800",
            IncidentStatus.Identified => "bg-blue-100 text-blue-800",
            IncidentStatus.Monitoring => "bg-purple-100 text-purple-800",
            IncidentStatus.Resolved => "bg-green-100 text-green-800",
            _ => "bg-gray-100 text-gray-800"
        };
    }

    // Modal models
    private class StatusUpdateModel
    {
        public IncidentStatus Status { get; set; } = IncidentStatus.Open;
        public string Message { get; set; } = string.Empty;
    }

    private class ResolveModel
    {
        public string ResolutionDetails { get; set; } = string.Empty;
    }

    private class UpdateModel
    {
        public string Message { get; set; } = string.Empty;
    }
}

@* FluentUI Dialog Component for Add Update *@
@if (ShowAddUpdateModal)
{
    <FluentDialog>
        <div class="bg-white rounded-lg shadow-xl max-w-lg w-full">
            <!-- Header -->
            <div class="flex items-center justify-between p-6 border-b border-gray-200 bg-gray-50 rounded-t-lg">
                <div class="flex items-center space-x-3">
                    <div class="w-10 h-10 bg-blue-100 rounded-full flex items-center justify-center">
                        <svg class="w-6 h-6 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                        </svg>
                    </div>
                    <div>
                        <h3 class="text-lg font-semibold text-gray-900">Add Update</h3>
                        <p class="text-sm text-gray-500">Add a new update to this incident</p>
                    </div>
                </div>
            </div>

            <!-- Body -->
            <div class="p-6">
                <EditForm Model="updateModel" OnValidSubmit="HandleAddUpdateFromDialog">
                    <div class="space-y-4">
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">
                                Update Message
                            </label>
                            <FluentTextArea @bind-Value="updateModel.Message"
                                            Rows="4"
                                            Placeholder="Enter update details..."
                                            Class="w-full"
                                            Required="true" />
                        </div>
                        
                        <div class="bg-blue-50 rounded-lg p-4 border border-blue-200">
                            <div class="flex items-start space-x-3">
                                <div class="flex-shrink-0">
                                    <svg class="w-5 h-5 text-blue-500 mt-0.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                                    </svg>
                                </div>
                                <div class="flex-1 min-w-0">
                                    <p class="text-sm text-blue-700">
                                        This update will be posted to the incident timeline and will be visible to all team members.
                                    </p>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Footer -->
                    <div class="flex justify-end space-x-3 pt-6 mt-6 border-t border-gray-200">
                        <FluentButton Appearance="Appearance.Neutral"
                                      @onclick="CloseAddUpdateDialog"
                                      Class="px-4 py-2 text-sm font-medium text-gray-700 bg-gray-100 rounded-md hover:bg-gray-200 transition-colors">
                            Cancel
                        </FluentButton>
                        <FluentButton Appearance="Appearance.Accent"
                                      Type="ButtonType.Submit"
                                      Disabled="string.IsNullOrWhiteSpace(updateModel.Message)"
                                      Class="px-4 py-2 text-sm font-medium text-white bg-blue-600 rounded-md hover:bg-blue-700 transition-colors">
                            Add Update
                        </FluentButton>
                    </div>
                </EditForm>
            </div>
        </div>
    </FluentDialog>
}
