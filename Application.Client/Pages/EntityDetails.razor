@page "/entities/{EntityId}"
@using Application.Shared.Models
@using Application.Shared.Services
@using Application.Shared.Enums
@using Microsoft.FluentUI.AspNetCore.Components
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))
@inject HttpClient _httpClient
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@attribute [Authorize]

<PageTitle>Entity Details - @(entity?.Name ?? "Loading...")</PageTitle>

<div class="min-h-screen bg-gray-50">
    @if (isLoading)
    {
        <div class="flex justify-center items-center h-64">
            <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600"></div>
        </div>
    }
    else if (entity == null)
    {
        <div class="text-center py-12">
            <h3 class="text-lg font-medium text-gray-900">Entity not found</h3>
            <p class="mt-2 text-sm text-gray-500">The entity you're looking for doesn't exist.</p>
            <div class="mt-6">
                <button @onclick="BackToEntities" 
                        class="inline-flex items-center px-4 py-2 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700">
                    Back to Entities
                </button>
            </div>
        </div>
    }
    else
    {
        <!-- Header -->
        <div class="bg-white border-b border-gray-200">
            <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
                <div class="py-6 md:flex md:items-center md:justify-between">
                    <div class="flex-1 min-w-0">
                        <nav class="flex" aria-label="Breadcrumb">
                            <ol class="flex items-center space-x-4">
                                <li>
                                    <div>
                                        <button @onclick="BackToEntities" class="text-gray-400 hover:text-gray-500">
                                            <svg class="flex-shrink-0 h-5 w-5" fill="currentColor" viewBox="0 0 20 20">
                                                <path fill-rule="evenodd" d="M9.707 14.707a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 1.414L7.414 9H15a1 1 0 110 2H7.414l2.293 2.293a1 1 0 010 1.414z" clip-rule="evenodd"></path>
                                            </svg>
                                            <span class="sr-only">Back</span>
                                        </button>
                                    </div>
                                </li>
                                <li>
                                    <div class="flex items-center">
                                        <svg class="flex-shrink-0 h-5 w-5 text-gray-300" fill="currentColor" viewBox="0 0 20 20">
                                            <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 111.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd"></path>
                                        </svg>
                                        <button @onclick="BackToEntities" class="ml-4 text-sm font-medium text-gray-500 hover:text-gray-700">
                                            Entities
                                        </button>
                                    </div>
                                </li>
                                <li>
                                    <div class="flex items-center">
                                        <svg class="flex-shrink-0 h-5 w-5 text-gray-300" fill="currentColor" viewBox="0 0 20 20">
                                            <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 111.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd"></path>
                                        </svg>
                                        <span class="ml-4 text-sm font-medium text-gray-500">@entity.Name</span>
                                    </div>
                                </li>
                            </ol>
                        </nav>
                        <div class="mt-2 flex items-center">
                            <h1 class="text-2xl font-bold leading-7 text-gray-900 sm:text-3xl sm:truncate">
                                @entity.GetEntityTypeIcon() @entity.Name
                            </h1>
                            @if (entity.IsCritical)
                            {
                                <span class="ml-3 inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-red-100 text-red-800">
                                    <svg class="w-4 h-4 mr-1" fill="currentColor" viewBox="0 0 20 20">
                                        <path fill-rule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clip-rule="evenodd"></path>
                                    </svg>
                                    Critical
                                </span>
                            }
                            <span class="ml-3 inline-flex items-center px-3 py-1 rounded-full text-sm font-medium @entity.GetEntityTypeClass()">
                                @entity.EntityType.ToString()
                            </span>
                        </div>
                        @if (!string.IsNullOrEmpty(entity.Description))
                        {
                            <p class="mt-2 text-sm text-gray-500">@entity.Description</p>
                        }
                    </div>
                    <div class="mt-4 flex md:mt-0 md:ml-4 space-x-3">
                        <button @onclick="EditEntity" 
                                class="inline-flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                            <svg class="-ml-1 mr-2 h-5 w-5 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
                            </svg>
                            Edit
                        </button>
                        <button @onclick="DeleteEntity" 
                                class="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-red-600 hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500">
                            <svg class="-ml-1 mr-2 h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                            </svg>
                            Delete
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Main Content -->
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
            <div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
                <!-- Left Column - Main Info -->
                <div class="lg:col-span-2 space-y-6">
                    <!-- Basic Information -->
                    <div class="bg-white overflow-hidden shadow rounded-lg">
                        <div class="px-6 py-5 sm:p-6">
                            <h3 class="text-lg leading-6 font-medium text-gray-900 mb-4">Basic Information</h3>
                            <dl class="grid grid-cols-1 gap-x-4 gap-y-6 sm:grid-cols-2">
                                <div>
                                    <dt class="text-sm font-medium text-gray-500">Type</dt>
                                    <dd class="mt-1 text-sm text-gray-900">@entity.EntityType.ToString()</dd>
                                </div>
                                <div>
                                    <dt class="text-sm font-medium text-gray-500">Status</dt>
                                    <dd class="mt-1 flex items-center text-sm text-gray-900">
                                        <span class="w-2 h-2 @(entity.IsActive ? "bg-green-400" : "bg-gray-400") rounded-full mr-2"></span>
                                        @(entity.IsActive ? "Active" : "Inactive")
                                    </dd>
                                </div>
                                @if (!string.IsNullOrEmpty(entity.Owner))
                                {
                                    <div>
                                        <dt class="text-sm font-medium text-gray-500">Owner</dt>
                                        <dd class="mt-1 text-sm text-gray-900">@entity.Owner</dd>
                                    </div>
                                }
                                @if (!string.IsNullOrEmpty(entity.Version))
                                {
                                    <div>
                                        <dt class="text-sm font-medium text-gray-500">Version</dt>
                                        <dd class="mt-1 text-sm text-gray-900">@entity.Version</dd>
                                    </div>
                                }
                                @if (!string.IsNullOrEmpty(entity.Location))
                                {
                                    <div>
                                        <dt class="text-sm font-medium text-gray-500">Location</dt>
                                        <dd class="mt-1 text-sm text-gray-900">@entity.Location</dd>
                                    </div>
                                }
                                @if (!string.IsNullOrEmpty(entity.Url))
                                {
                                    <div>
                                        <dt class="text-sm font-medium text-gray-500">URL</dt>
                                        <dd class="mt-1 text-sm text-gray-900">
                                            <a href="@entity.Url" target="_blank" class="text-blue-600 hover:text-blue-800">
                                                @entity.Url
                                                <svg class="inline w-3 h-3 ml-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"></path>
                                                </svg>
                                            </a>
                                        </dd>
                                    </div>
                                }
                            </dl>
                        </div>
                    </div>

                    <!-- Dependencies -->
                    <div class="bg-white overflow-hidden shadow rounded-lg">
                        <div class="px-6 py-5 sm:p-6">
                            <div class="flex items-center justify-between mb-4">
                                <h3 class="text-lg leading-6 font-medium text-gray-900">Dependencies</h3>
                                <button @onclick="ManageDependencies" 
                                        class="inline-flex items-center px-3 py-1 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50">
                                    <svg class="-ml-1 mr-1 h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z"></path>
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                                    </svg>
                                    Manage
                                </button>
                            </div>
                            
                            @if (entity.Dependencies?.Any() == true)
                            {
                                <div class="space-y-3">
                                    @foreach (var dependency in entity.Dependencies.OrderBy(d => d.Order))
                                    {
                                        <div class="flex items-center p-3 border border-gray-200 rounded-lg hover:bg-gray-50">
                                            <div class="flex-shrink-0">
                                                <span class="w-3 h-3 bg-blue-500 rounded-full inline-block mr-3"></span>
                                            </div>
                                            <div class="flex-1 min-w-0">
                                                <div class="flex items-center">
                                                    <span class="text-sm font-medium text-gray-900">
                                                        @dependency.DependsOnEntity?.Name
                                                    </span>
                                                    @if (dependency.IsCritical)
                                                    {
                                                        <span class="ml-2 inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-red-100 text-red-800">
                                                            <svg class="w-3 h-3 mr-1" fill="currentColor" viewBox="0 0 20 20">
                                                                <path fill-rule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clip-rule="evenodd"></path>
                                                            </svg>
                                                            Critical
                                                        </span>
                                                    }
                                                    @if (!string.IsNullOrEmpty(dependency.DependencyType.ToString()))
                                                    {
                                                        <span class="ml-2 text-xs text-gray-500">(@dependency.DependencyType)</span>
                                                    }
                                                </div>
                                                @if (!string.IsNullOrEmpty(dependency.Description))
                                                {
                                                    <p class="mt-1 text-sm text-gray-500">@dependency.Description</p>
                                                }
                                            </div>
                                            <div class="flex-shrink-0 text-xs text-gray-400">
                                                Order: @dependency.Order
                                            </div>
                                        </div>
                                    }
                                </div>
                            }
                            else
                            {
                                <div class="text-center py-4">
                                    <svg class="mx-auto h-8 w-8 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1"></path>
                                    </svg>
                                    <p class="mt-2 text-sm text-gray-500">No dependencies configured</p>
                                </div>
                            }
                        </div>
                    </div>
                </div>

                <!-- Right Column - Sidebar -->
                <div class="space-y-6">
                    <!-- Quick Actions -->
                    <div class="bg-white overflow-hidden shadow rounded-lg">
                        <div class="px-6 py-5">
                            <h3 class="text-lg leading-6 font-medium text-gray-900 mb-4">Quick Actions</h3>
                            <div class="space-y-3">
                                <button @onclick="EditEntity" 
                                        class="w-full flex items-center px-3 py-2 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50">
                                    <svg class="mr-3 h-4 w-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
                                    </svg>
                                    Edit Entity
                                </button>
                                <button @onclick="ManageDependencies" 
                                        class="w-full flex items-center px-3 py-2 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50">
                                    <svg class="mr-3 h-4 w-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1"></path>
                                    </svg>
                                    Manage Dependencies
                                </button>
                                <button @onclick="OpenUpdateStatusModal" 
                                        class="w-full flex items-center px-3 py-2 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50">
                                    <svg class="mr-3 h-4 w-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
                                    </svg>
                                    Update Status
                                </button>
                                @if (!string.IsNullOrEmpty(entity.Url))
                                {
                                    <a href="@entity.Url" target="_blank" 
                                       class="w-full flex items-center px-3 py-2 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50">
                                        <svg class="mr-3 h-4 w-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"></path>
                                        </svg>
                                        Open URL
                                    </a>
                                }
                            </div>
                        </div>
                    </div>

                    <!-- Entity Metadata -->
                    <div class="bg-white overflow-hidden shadow rounded-lg">
                        <div class="px-6 py-5">
                            <h3 class="text-lg leading-6 font-medium text-gray-900 mb-4">Entity Info</h3>
                            <dl class="space-y-3">
                                <div>
                                    <dt class="text-sm font-medium text-gray-500">Created</dt>
                                    <dd class="mt-1 text-sm text-gray-900">@(entity.CreatedOn?.ToString("MMM dd, yyyy") ?? "Unknown")</dd>
                                </div>
                                <div>
                                    <dt class="text-sm font-medium text-gray-500">Last Modified</dt>
                                    <dd class="mt-1 text-sm text-gray-900">@(entity.ModifiedOn?.ToString("MMM dd, yyyy") ?? "Never")</dd>
                                </div>
                                <div>
                                    <dt class="text-sm font-medium text-gray-500">Entity ID</dt>
                                    <dd class="mt-1 text-sm text-gray-900 font-mono break-all">@entity.Id</dd>
                                </div>
                            </dl>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

<!-- Update Status Modal -->
@if (showStatusUpdateModal)
{
    <FluentDialog>
        <div class="bg-white rounded-lg shadow-xl max-w-lg w-full">
            <!-- Header -->
            <div class="flex items-center justify-between p-6 border-b border-gray-200 bg-gray-50 rounded-t-lg">
                <div class="flex items-center space-x-3">
                    <div class="w-10 h-10 bg-blue-100 rounded-full flex items-center justify-center">
                        <svg class="w-6 h-6 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
                        </svg>
                    </div>
                    <div>
                        <h3 class="text-lg font-semibold text-gray-900">Update Entity Status</h3>
                        <p class="text-sm text-gray-500">Change the entity status and manage incidents</p>
                    </div>
                </div>
            </div>

            <!-- Body -->
            <div class="p-6">
                <EditForm Model="statusUpdateModel" OnValidSubmit="HandleStatusUpdate">
                    <DataAnnotationsValidator />
                    <ValidationSummary class="text-red-600 text-sm mb-4" />
                    
                    <div class="space-y-4">
                        <!-- Current Status Display -->
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Current Status</label>
                            <div class="p-3 bg-gray-50 rounded-lg">
                                <span class="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium @GetEntityStatusClass(currentEntityStatus)">
                                    @GetEntityStatusDisplayName(currentEntityStatus)
                                </span>
                            </div>
                        </div>
                        
                        <!-- New Status Selection -->
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">
                                New Status <span class="text-red-500">*</span>
                            </label>
                            <FluentSelect @bind-Value="selectedStatusString" 
                                         TOption="string"
                                         Class="w-full">
                                <FluentOption Value="Unknown" TOption="string">Unknown</FluentOption>
                                <FluentOption Value="Online" TOption="string">Online</FluentOption>
                                <FluentOption Value="Offline" TOption="string">Offline</FluentOption>
                                <FluentOption Value="Degraded" TOption="string">Degraded</FluentOption>
                                <FluentOption Value="Maintenance" TOption="string">Maintenance</FluentOption>
                                <FluentOption Value="Error" TOption="string">Error</FluentOption>
                            </FluentSelect>
                        </div>
                        
                        <!-- Status Message -->
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">
                                Status Message <span class="text-red-500">*</span>
                            </label>
                            <FluentTextArea @bind-Value="statusUpdateModel.StatusMessage"
                                            Rows="3"
                                            Placeholder="Provide details about this status change..."
                                            Class="w-full"
                                            Required="true" />
                        </div>
                        
                        <!-- Impact Notice -->
                        @if (statusUpdateModel.Status != EntityStatus.Online && currentEntityStatus == EntityStatus.Online)
                        {
                            <div class="bg-yellow-50 border border-yellow-200 rounded-md p-3">
                                <div class="flex">
                                    <svg class="flex-shrink-0 h-5 w-5 text-yellow-400" fill="currentColor" viewBox="0 0 20 20">
                                        <path fill-rule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clip-rule="evenodd"></path>
                                    </svg>
                                    <div class="ml-3">
                                        <p class="text-sm text-yellow-700">
                                            This will create a new incident for the status change from Online to @statusUpdateModel.Status.
                                        </p>
                                    </div>
                                </div>
                            </div>
                        }
                        else if (statusUpdateModel.Status == EntityStatus.Online && currentEntityStatus != EntityStatus.Online)
                        {
                            <div class="bg-green-50 border border-green-200 rounded-md p-3">
                                <div class="flex">
                                    <svg class="flex-shrink-0 h-5 w-5 text-green-400" fill="currentColor" viewBox="0 0 20 20">
                                        <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"></path>
                                    </svg>
                                    <div class="ml-3">
                                        <p class="text-sm text-green-700">
                                            This will resolve any open incidents for this entity and update them as resolved.
                                        </p>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>

                    <!-- Footer -->
                    <div class="flex justify-end space-x-3 pt-6 mt-6 border-t border-gray-200">
                        <FluentButton Appearance="Appearance.Neutral"
                                      @onclick="CloseStatusUpdateModal"
                                      Class="px-4 py-2 text-sm font-medium text-gray-700 bg-gray-100 rounded-md hover:bg-gray-200 transition-colors">
                            Cancel
                        </FluentButton>
                        <FluentButton Appearance="Appearance.Accent"
                                      Type="ButtonType.Submit"
                                      Disabled="@(string.IsNullOrWhiteSpace(statusUpdateModel.StatusMessage) || isUpdatingStatus)"
                                      Class="px-4 py-2 text-sm font-medium text-white bg-blue-600 rounded-md hover:bg-blue-700 transition-colors">
                            @if (isUpdatingStatus)
                            {
                                <span>Updating...</span>
                            }
                            else
                            {
                                <span>Update Status</span>
                            }
                        </FluentButton>
                    </div>
                </EditForm>
            </div>
        </div>
    </FluentDialog>
}

@code {
    [Parameter] public string EntityId { get; set; } = string.Empty;
    
    private Entity? entity;
    private bool isLoading = true;
    
    // Status update modal state
    private bool showStatusUpdateModal = false;
    private bool isUpdatingStatus = false;
    private StatusUpdateModel statusUpdateModel = new();
    private EntityStatus currentEntityStatus = EntityStatus.Unknown;

    // Helper property for FluentSelect binding
    private string selectedStatusString
    {
        get => statusUpdateModel.Status.ToString();
        set => statusUpdateModel.Status = Enum.Parse<EntityStatus>(value);
    }

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(EntityId))
        {
            await LoadEntity();
        }
    }

    private async Task LoadEntity()
    {
        try
        {
            entity = await _httpClient.GetFromJsonAsync<Entity>($"api/entities/{EntityId}");
            
            // Get current entity status from latest status history
            if (entity != null)
            {
                currentEntityStatus = await GetCurrentEntityStatus();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading entity: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }
    
    private async Task<EntityStatus> GetCurrentEntityStatus()
    {
        try
        {
            var response = await _httpClient.GetAsync($"api/entities/{EntityId}/status/latest");
            if (response.IsSuccessStatusCode)
            {
                var statusHistory = await response.Content.ReadFromJsonAsync<EntityStatusHistory>();
                return statusHistory?.Status ?? EntityStatus.Unknown;
            }
        }
        catch
        {
            // If we can't get the latest status, return Unknown
        }
        
        return EntityStatus.Unknown;
    }

    private void BackToEntities()
    {
        Navigation.NavigateTo("/entities");
    }

    private void EditEntity()
    {
        if (entity != null)
        {
            Navigation.NavigateTo($"/entities/{entity.Id}/edit");
        }
    }

    private async Task DeleteEntity()
    {
        if (entity == null) return;
        
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete '{entity.Name}'? This action cannot be undone.");
        if (confirmed)
        {
            try
            {
                await _httpClient.DeleteAsync($"api/entities/{entity.Id}");
                Navigation.NavigateTo("/entities");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error deleting entity: {ex.Message}");
                await JSRuntime.InvokeVoidAsync("alert", "Error deleting entity. Please try again.");
            }
        }
    }

    private void ManageDependencies()
    {
        Navigation.NavigateTo($"/entities/{EntityId}/dependencies");
    }
    
    // Status update modal methods
    private void OpenUpdateStatusModal()
    {
        statusUpdateModel = new StatusUpdateModel { Status = currentEntityStatus };
        showStatusUpdateModal = true;
    }
    
    private void CloseStatusUpdateModal()
    {
        showStatusUpdateModal = false;
        statusUpdateModel = new();
    }
    
    private async Task HandleStatusUpdate()
    {
        if (entity == null || string.IsNullOrWhiteSpace(statusUpdateModel.StatusMessage))
            return;
            
        isUpdatingStatus = true;
        
        try
        {
            // Add workspace header
            if (!_httpClient.DefaultRequestHeaders.Contains("X-Workspace-ID"))
            {
                _httpClient.DefaultRequestHeaders.Add("X-Workspace-ID", "default-workspace");
            }
            
            var request = new UpdateEntityStatusRequest
            {
                Status = statusUpdateModel.Status,
                StatusMessage = statusUpdateModel.StatusMessage,
                EntityId = EntityId,
                PreviousStatus = currentEntityStatus
            };
            
            var response = await _httpClient.PostAsJsonAsync($"api/entities/{EntityId}/status", request);
            
            if (response.IsSuccessStatusCode)
            {
                await JSRuntime.InvokeVoidAsync("alert", "Entity status updated successfully!");
                CloseStatusUpdateModal();
                
                // Refresh entity and current status
                currentEntityStatus = statusUpdateModel.Status;
                await LoadEntity();
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                await JSRuntime.InvokeVoidAsync("alert", $"Error updating status: {errorContent}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating entity status: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", "Error updating entity status. Please try again.");
        }
        finally
        {
            isUpdatingStatus = false;
        }
    }
    
    // Helper methods for status display
    private string GetEntityStatusClass(EntityStatus status)
    {
        return status switch
        {
            EntityStatus.Online => "bg-green-100 text-green-800",
            EntityStatus.Offline => "bg-gray-100 text-gray-800",
            EntityStatus.Degraded => "bg-yellow-100 text-yellow-800",
            EntityStatus.Maintenance => "bg-blue-100 text-blue-800",
            EntityStatus.Error => "bg-red-100 text-red-800",
            _ => "bg-gray-100 text-gray-800"
        };
    }
    
    private string GetEntityStatusDisplayName(EntityStatus status)
    {
        return status switch
        {
            EntityStatus.Online => "Online",
            EntityStatus.Offline => "Offline", 
            EntityStatus.Degraded => "Degraded",
            EntityStatus.Maintenance => "Maintenance",
            EntityStatus.Error => "Error",
            _ => "Unknown"
        };
    }

    // Model for status update
    private class StatusUpdateModel
    {
        public EntityStatus Status { get; set; } = EntityStatus.Unknown;
        public string StatusMessage { get; set; } = string.Empty;
    }
    
    // Request model for API
    private class UpdateEntityStatusRequest
    {
        public EntityStatus Status { get; set; }
        public string StatusMessage { get; set; } = string.Empty;
        public string EntityId { get; set; } = string.Empty;
        public EntityStatus PreviousStatus { get; set; }
    }

    // private string GetEntityTypeClass(EntityType entityType)
    // {
    //     return entityType switch
    //     {
    //         EntityType.Server => "bg-green-100 text-green-800",
    //         EntityType.Database => "bg-blue-100 text-blue-800",
    //         EntityType.Report => "bg-purple-100 text-purple-800",
    //         EntityType.Dataset => "bg-yellow-100 text-yellow-800",
    //         EntityType.DataPipeline => "bg-indigo-100 text-indigo-800",
    //         _ => "bg-gray-100 text-gray-800"
    //     };
    // }

    // private string GetEntityTypeIcon(EntityType entityType)
    // {
    //     return entityType switch
    //     {
    //         EntityType.Server => "🖥️",
    //         EntityType.Database => "🗄️",
    //         EntityType.Report => "📊",
    //         EntityType.Dataset => "📈",
    //         EntityType.DataPipeline => "🔄",
    //         _ => "📁"
    //     };
    // }
}
