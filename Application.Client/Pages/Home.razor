@page "/"
@using Application.Client.Components
@using Application.Shared.Models
@using Application.Shared.Enums
@using Application.Client.Services
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))
@inject EntityClientService EntityService
@inject IncidentClientService IncidentService

<div class="min-h-screen bg-gray-50">
    <!-- Header -->
    <div class="bg-white shadow-sm border-b">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
            <div class="flex justify-between items-center">
                <div>
                    <h1 class="text-3xl font-bold text-gray-900">System Status</h1>
                    <p class="mt-1 text-sm text-gray-600">Real-time monitoring of all systems and services</p>
                </div>
                <div class="flex items-center space-x-4">
                    <div class="text-sm text-gray-500">
                        Last updated: @LastUpdated.ToString("MMM dd, yyyy HH:mm:ss")
                    </div>
                    <button @onclick="RefreshData" disabled="@IsLoading" 
                            class="inline-flex items-center px-3 py-2 border border-transparent text-sm leading-4 font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:bg-gray-400">
                        @if (IsLoading)
                        {
                            <svg class="animate-spin -ml-1 mr-2 h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                                <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                            </svg>
                            <span>Refreshing...</span>
                        }
                        else
                        {
                            <span>Refresh</span>
                        }
                    </button>
                </div>
            </div>
        </div>
    </div>

    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        @if (IsLoading && !Entities.Any())
        {
            <div class="flex items-center justify-center h-64">
                <div class="text-center">
                    <svg class="animate-spin h-8 w-8 text-blue-600 mx-auto mb-4" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                        <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                    </svg>
                    <p class="text-gray-600">Loading dashboard...</p>
                </div>
            </div>
        }
        else
        {
            <!-- KPI Overview Cards -->
            <div class="grid grid-cols-1 sm:grid-cols-4 lg:grid-cols-4 gap-4 sm:gap-6 mb-8">
                <!-- Systems Online -->
                <div class="bg-gradient-to-br from-green-50 to-green-100 border border-green-200 rounded-xl p-4 sm:p-6 shadow-sm hover:shadow-md transition-shadow duration-200">
                    <div class="flex items-center justify-between">
                        <div class="flex-1">
                            <p class="text-xs sm:text-sm font-medium text-green-600 uppercase tracking-wide">Systems Online</p>
                            <p class="text-2xl sm:text-3xl font-bold text-green-900 mt-2">@OnlineEntities</p>
                            <div class="flex items-center mt-2">
                                <span class="text-xs font-medium text-green-700 bg-green-200 px-2 py-1 rounded-full">
                                    Operational
                                </span>
                            </div>
                        </div>
                        <div class="w-10 h-10 sm:w-12 sm:h-12 bg-green-500 rounded-xl flex items-center justify-center shadow-lg">
                            <svg class="w-5 h-5 sm:w-7 sm:h-7 text-white" fill="currentColor" viewBox="0 0 20 20">
                                <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path>
                            </svg>
                        </div>
                    </div>
                </div>

                <!-- Systems Offline -->
                <div class="bg-gradient-to-br from-red-50 to-red-100 border border-red-200 rounded-xl p-4 sm:p-6 shadow-sm hover:shadow-md transition-shadow duration-200">
                    <div class="flex items-center justify-between">
                        <div class="flex-1">
                            <p class="text-xs sm:text-sm font-medium text-red-600 uppercase tracking-wide">Systems Offline</p>
                            <p class="text-2xl sm:text-3xl font-bold text-red-900 mt-2">@OfflineEntities</p>
                            <div class="flex items-center mt-2">
                                <span class="text-xs font-medium text-red-700 bg-red-200 px-2 py-1 rounded-full">
                                    @(OfflineEntities > 0 ? "Issues Detected" : "All Online")
                                </span>
                            </div>
                        </div>
                        <div class="w-10 h-10 sm:w-12 sm:h-12 bg-red-500 rounded-xl flex items-center justify-center shadow-lg">
                            <svg class="w-5 h-5 sm:w-7 sm:h-7 text-white" fill="currentColor" viewBox="0 0 20 20">
                                <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"></path>
                            </svg>
                        </div>
                    </div>
                </div>

                <!-- Active Incidents -->
                <div class="bg-gradient-to-br from-amber-50 to-amber-100 border border-amber-200 rounded-xl p-4 sm:p-6 shadow-sm hover:shadow-md transition-shadow duration-200">
                    <div class="flex items-center justify-between">
                        <div class="flex-1">
                            <p class="text-xs sm:text-sm font-medium text-amber-600 uppercase tracking-wide">Active Incidents</p>
                            <p class="text-2xl sm:text-3xl font-bold text-amber-900 mt-2">@ActiveIncidents.Count</p>
                            <div class="flex items-center mt-2">
                                <span class="text-xs font-medium text-amber-700 bg-amber-200 px-2 py-1 rounded-full">
                                    @(ActiveIncidents.Count > 0 ? "Monitoring" : "No Issues")
                                </span>
                            </div>
                        </div>
                        <div class="w-10 h-10 sm:w-12 sm:h-12 bg-amber-500 rounded-xl flex items-center justify-center shadow-lg">
                            <svg class="w-5 h-5 sm:w-7 sm:h-7 text-white" fill="currentColor" viewBox="0 0 20 20">
                                <path fill-rule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clip-rule="evenodd"></path>
                            </svg>
                        </div>
                    </div>
                </div>

                <!-- Critical Issues -->
                <div class="bg-gradient-to-br from-purple-50 to-purple-100 border border-purple-200 rounded-xl p-4 sm:p-6 shadow-sm hover:shadow-md transition-shadow duration-200">
                    <div class="flex items-center justify-between">
                        <div class="flex-1">
                            <p class="text-xs sm:text-sm font-medium text-purple-600 uppercase tracking-wide">Critical Issues</p>
                            <p class="text-2xl sm:text-3xl font-bold text-purple-900 mt-2">@CriticalIncidents</p>
                            <div class="flex items-center mt-2">
                                <span class="text-xs font-medium text-purple-700 bg-purple-200 px-2 py-1 rounded-full">
                                    @(CriticalIncidents > 0 ? "Attention Required" : "All Clear")
                                </span>
                            </div>
                        </div>
                        <div class="w-10 h-10 sm:w-12 sm:h-12 bg-purple-500 rounded-xl flex items-center justify-center shadow-lg">
                            <svg class="w-5 h-5 sm:w-7 sm:h-7 text-white" fill="currentColor" viewBox="0 0 20 20">
                                <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clip-rule="evenodd"></path>
                            </svg>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Filters -->
            <div class="bg-white p-6 rounded-lg shadow mb-8">
                <div class="flex flex-wrap items-center gap-4">
                    <div>
                        <label for="entity-filter" class="block text-sm font-medium text-gray-700 mb-1">Filter by Group:</label>
                        <select @bind="SelectedGroupFilter" @bind:after="ApplyFilters" 
                                class="block w-48 pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md">
                            <option value="">All Groups</option>
                            @foreach (var group in GetEntityGroups())
                            {
                                <option value="@group">@group</option>
                            }
                        </select>
                    </div>
                    
                    <div>
                        <label for="status-filter" class="block text-sm font-medium text-gray-700 mb-1">Filter by Status:</label>
                        <select @bind="SelectedStatusFilter" @bind:after="ApplyFilters"
                                class="block w-48 pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md">
                            <option value="">All Statuses</option>
                            <option value="Online">Online</option>
                            <option value="Degraded">Degraded</option>
                            <option value="Offline">Offline</option>
                            <option value="Error">Error</option>
                            <option value="Maintenance">Maintenance</option>
                        </select>
                    </div>

                    <div>
                        <label for="type-filter" class="block text-sm font-medium text-gray-700 mb-1">Filter by Type:</label>
                        <select @bind="SelectedTypeFilter" @bind:after="ApplyFilters"
                                class="block w-48 pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md">
                            <option value="">All Types</option>
                            @foreach (EntityType type in Enum.GetValues<EntityType>())
                            {
                                <option value="@type">@type</option>
                            }
                        </select>
                    </div>

                    <div class="flex items-end mt-1">
                        <button @onclick="ClearFilters" 
                                class="px-4 py-2 mt-4 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                            Clear Filters
                        </button>
                    </div>
                </div>
            </div>

            <!-- Active Incidents -->
            @if (ActiveIncidents.Any())
            {
                <div class="bg-white rounded-lg shadow mb-8">
                    <div class="px-6 py-4 border-b border-gray-200">
                        <h2 class="text-lg font-medium text-gray-900 flex items-center">
                            <svg class="w-5 h-5 text-red-500 mr-2" fill="currentColor" viewBox="0 0 20 20">
                                <path fill-rule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clip-rule="evenodd"></path>
                            </svg>
                            Active Incidents
                        </h2>
                    </div>
                    <div class="p-6">
                        <div class="space-y-4">
                            @foreach (var incident in ActiveIncidents.OrderByDescending(i => i.Severity))
                            {
                                <div class="border border-gray-200 rounded-lg p-4 @GetIncidentBorderClass(incident.Severity)">
                                    <div class="flex items-start justify-between">
                                        <div class="flex-1">
                                            <div class="flex items-center space-x-2 mb-2">
                                                <h3 class="text-sm font-medium text-gray-900">@incident.Title</h3>
                                                <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium @GetSeverityBadgeClass(incident.Severity)">
                                                    @GetSeverityText(incident.Severity)
                                                </span>
                                                <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium @GetIncidentStatusBadgeClass(incident.Status)">
                                                    @GetIncidentStatusText(incident.Status)
                                                </span>
                                            </div>
                                            <p class="text-sm text-gray-600 mb-2">@incident.Description.Take(100)  + (incident.Description.Length > 100 ? "..." : "")</p>
                                            <div class="flex items-center space-x-4 text-xs text-gray-500">
                                                <span>Started: @incident.StartedAt.Value.ToString("MMM dd, HH:mm")</span>
                                                @if (!string.IsNullOrEmpty(incident.AssignedTo))
                                                {
                                                    <span>Assigned to: @incident.AssignedTo</span>
                                                }
                                            </div>
                                        </div>
                                        <button @onclick="() => ToggleIncidentUpdates(incident.Id)"
                                                class="ml-4 text-sm text-blue-600 hover:text-blue-800">
                                            @if (SelectedIncidentId == incident.Id)
                                            {
                                                <span>Hide Updates</span>
                                            }
                                            else
                                            {
                                                <span>View Updates</span>
                                            }
                                        </button>
                                    </div>
                                    @if (SelectedIncidentId == incident.Id)
                                    {
                                        <div class="mt-4 pt-4 border-t border-gray-200">
                                            <div class="bg-gray-50 rounded-md p-3">
                                                <p class="text-sm text-gray-600">Loading updates for incident @incident.Id...</p>
                                                <p class="text-xs text-gray-500 italic">Incident updates component will be loaded here</p>
                                            </div>
                                        </div>
                                    }
                                </div>
                            }
                        </div>
                    </div>
                </div>
            }

            <!-- Entity Groups -->
            @foreach (var group in GetFilteredEntityGroups())
            {
                var groupEntities = GetEntitiesForGroup(group);
                if (groupEntities.Any())
                {
                    <div class="bg-white rounded-lg shadow mb-8">
                        <div class="px-6 py-4 border-b border-gray-200">
                            <div class="flex items-center justify-between">
                                <h2 class="text-lg font-medium text-gray-900">@group</h2>
                                <div class="flex items-center space-x-2">
                                    <span class="text-sm text-gray-500">@groupEntities.Count entities</span>
                                    <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium @GetGroupStatusBadgeClass(groupEntities)">
                                        @GetGroupStatusText(groupEntities)
                                    </span>
                                </div>
                            </div>
                        </div>
                        <div class="p-6">
                            <div class="space-y-3">
                                @foreach (var entity in groupEntities.OrderBy(e => e.Name))
                                {
                                    var entityIncidents = GetEntityIncidents(entity.Id);
                                    var entityStatus = GetEntityStatus(entity);
                                    
                                    <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between p-4 border border-gray-200 rounded-lg hover:bg-gray-50 transition-colors duration-150 space-y-3 sm:space-y-0">
                                        <div class="flex items-center space-x-4 flex-1 min-w-0">
                                            <div class="flex-shrink-0">
                                                <div class="w-3 h-3 rounded-full @GetStatusIndicatorClass(entityStatus)"></div>
                                            </div>
                                            <div class="flex items-center space-x-3 flex-1 min-w-0">
                                                <span class="text-2xl flex-shrink-0">@entity.GetEntityTypeIcon()</span>
                                                <div class="flex-1 min-w-0">
                                                    <div class="flex flex-col space-y-2">
                                                        <h3 class="text-sm font-medium text-gray-900 truncate">@entity.Name</h3>
                                                        <div class="flex flex-wrap gap-1">
                                                            @if (entity.IsCritical)
                                                            {
                                                                <span class="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-red-100 text-red-800">
                                                                    Critical
                                                                </span>
                                                            }
                                                            <span class="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium ml-2 @entity.GetEntityTypeClass()">
                                                                @entity.EntityType
                                                            </span>
                                                        </div>
                                                    </div>
                                                    @if (!string.IsNullOrEmpty(entity.Description))
                                                    {
                                                        <p class="text-xs text-gray-500 mt-1">@entity.Description</p>
                                                    }
                                                    @if (entityIncidents.Any())
                                                    {
                                                        <div class="flex items-center space-x-2 mt-1">
                                                            <svg class="w-4 h-4 text-red-500" fill="currentColor" viewBox="0 0 20 20">
                                                                <path fill-rule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clip-rule="evenodd"></path>
                                                            </svg>
                                                            <span class="text-xs text-red-600">@entityIncidents.Count incident(s)</span>
                                                        </div>
                                                    }
                                                </div>
                                            </div>
                                        </div>
                                        <div class="flex flex-col sm:flex-row sm:items-center space-y-2 sm:space-y-0 sm:space-x-4 flex-shrink-0">
                                            <div class="flex items-center justify-between sm:justify-end sm:text-right">
                                                <div class="flex items-center space-x-2">
                                                    <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium @GetEntityStatusBadgeClass(entityStatus)">
                                                        @GetEntityStatusText(entity)
                                                    </span>
                                                    @if (!string.IsNullOrEmpty(entity.Version))
                                                    {
                                                        <p class="text-xs text-gray-500">v@entity.Version</p>
                                                    }
                                                </div>
                                                <button @onclick="() => ToggleEntityDetails(entity.Id)"
                                                        class="ml-2 sm:ml-0 text-sm text-blue-600 hover:text-blue-800 flex-shrink-0">
                                                    @if (SelectedEntityId == entity.Id)
                                                    {
                                                        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 15l7-7 7 7"></path>
                                                        </svg>
                                                    }
                                                    else
                                                    {
                                                        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                                                        </svg>
                                                    }
                                                </button>
                                            </div>
                                        </div>
                                    </div>

                                    @if (SelectedEntityId == entity.Id)
                                    {
                                        <div class="ml-12 mt-3 p-4 bg-gray-50 rounded-lg">
                                            <div class="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
                                                <div>
                                                    @if (!string.IsNullOrEmpty(entity.Url))
                                                    {
                                                        <p><span class="font-medium text-gray-700">URL:</span> <a href="@entity.Url" target="_blank" class="text-blue-600 hover:text-blue-800">@entity.Url</a></p>
                                                    }
                                                    @if (!string.IsNullOrEmpty(entity.Location))
                                                    {
                                                        <p><span class="font-medium text-gray-700">Location:</span> @entity.Location</p>
                                                    }
                                                    @if (!string.IsNullOrEmpty(entity.Owner))
                                                    {
                                                        <p><span class="font-medium text-gray-700">Owner:</span> @entity.Owner</p>
                                                    }
                                                </div>
                                                <div>
                                                    <p><span class="font-medium text-gray-700">Type:</span> @entity.EntityType</p>
                                                    <p><span class="font-medium text-gray-700">Active:</span> @(entity.IsActive ? "Yes" : "No")</p>
                                                    <p><span class="font-medium text-gray-700">Critical:</span> @(entity.IsCritical ? "Yes" : "No")</p>
                                                </div>
                                            </div>
                                            
                                            @if (entityIncidents.Any())
                                            {
                                                <div class="mt-4 pt-4 border-t border-gray-200">
                                                    <h4 class="font-medium text-gray-700 mb-2">Related Incidents</h4>
                                                    <div class="space-y-2">
                                                        @foreach (var incident in entityIncidents)
                                                        {
                                                            <div class="flex items-center justify-between p-2 bg-white rounded border">
                                                                <div class="flex items-center space-x-2">
                                                                    <span class="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium @GetSeverityBadgeClass(incident.Severity)">
                                                                        @GetSeverityText(incident.Severity)
                                                                    </span>
                                                                    <span class="text-sm text-gray-900">@incident.Title</span>
                                                                </div>
                                                                <span class="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium @GetIncidentStatusBadgeClass(incident.Status)">
                                                                    @GetIncidentStatusText(incident.Status)
                                                                </span>
                                                            </div>
                                                        }
                                                    </div>
                                                </div>
                                            }

                                            <!-- Entity Status History Component -->
                                            <StatusHistoryComponent EntityId="@entity.Id" WorkspaceId="@(WorkspaceId ?? "default")" />
                                        </div>
                                    }
                                }
                            </div>
                        </div>
                    </div>
                }
            }
        }
    </div>
</div>

@code {
    [SupplyParameterFromQuery(Name = "w")] public string? WorkspaceId { get; set; }
    private List<Entity> Entities = new();
    private List<Incident> ActiveIncidents = new();
    private DateTime LastUpdated = DateTime.Now;
    private bool IsLoading = true;
    private string? SelectedIncidentId = null;
    private string? SelectedEntityId = null;

    // Filter properties
    private string SelectedGroupFilter = "";
    private string SelectedStatusFilter = "";
    private string SelectedTypeFilter = "";

    private int OnlineEntities => GetFilteredEntities().Count(e => GetEntityStatus(e) == EntityStatus.Online);
    private int OfflineEntities => GetFilteredEntities().Count(e => GetEntityStatus(e) == EntityStatus.Offline);
    private int CriticalIncidents => ActiveIncidents.Count(i => i.Severity == IncidentSeverity.Critical);

    protected override async Task OnInitializedAsync()
    {
        await RefreshData();
    }

    private async Task RefreshData()
    {
        IsLoading = true;
        StateHasChanged();

        try
        {
            var workspaceId = WorkspaceId ?? "default";
            var entitiesTask = EntityService.GetEntitiesAsync(workspaceId);
            var incidentsTask = IncidentService.GetActiveIncidentsAsync(workspaceId);

            await Task.WhenAll(entitiesTask, incidentsTask);

            Entities = await entitiesTask;
            ActiveIncidents = await incidentsTask;
            LastUpdated = DateTime.Now;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error refreshing data: {ex.Message}");
        }
        finally
        {
            IsLoading = false;
            StateHasChanged();
        }
    }

    private List<string> GetEntityGroups()
    {
        return Entities
            .Select(e => e.Group ?? "Default")
            .Distinct()
            .OrderBy(g => g)
            .ToList();
    }

    private List<string> GetFilteredEntityGroups()
    {
        var groups = GetEntityGroups();
        
        if (!string.IsNullOrEmpty(SelectedGroupFilter))
        {
            groups = groups.Where(g => g == SelectedGroupFilter).ToList();
        }

        return groups;
    }

    private List<Entity> GetFilteredEntities()
    {
        var filteredEntities = Entities.AsEnumerable();

        if (!string.IsNullOrEmpty(SelectedGroupFilter))
        {
            filteredEntities = filteredEntities.Where(e => (e.Group ?? "Default") == SelectedGroupFilter);
        }

        if (!string.IsNullOrEmpty(SelectedStatusFilter))
        {
            filteredEntities = filteredEntities.Where(e => GetEntityStatusText(e) == SelectedStatusFilter);
        }

        if (!string.IsNullOrEmpty(SelectedTypeFilter))
        {
            filteredEntities = filteredEntities.Where(e => e.EntityType.ToString() == SelectedTypeFilter);
        }

        return filteredEntities.ToList();
    }

    private List<Entity> GetEntitiesForGroup(string group)
    {
        return GetFilteredEntities()
            .Where(e => (e.Group ?? "Default") == group)
            .ToList();
    }

    private void ApplyFilters()
    {
        StateHasChanged();
    }

    private void ClearFilters()
    {
        SelectedGroupFilter = "";
        SelectedStatusFilter = "";
        SelectedTypeFilter = "";
        StateHasChanged();
    }

    private EntityStatus GetEntityStatus(Entity entity)
    {
        var entityIncidents = GetEntityIncidents(entity.Id);
        if (entityIncidents.Any(i => i.Severity == IncidentSeverity.Critical))
            return EntityStatus.Error;
        
        if (entityIncidents.Any(i => i.Severity == IncidentSeverity.High))
            return EntityStatus.Degraded;
        
        if (entityIncidents.Any())
            return EntityStatus.Degraded;

        return entity.IsActive ? EntityStatus.Online : EntityStatus.Offline;
    }

    private List<Incident> GetEntityIncidents(string entityId)
    {
        return ActiveIncidents.Where(i => i.EntityId == entityId).ToList();
    }

    // Status indicator classes for the colored dots
    private string GetStatusIndicatorClass(EntityStatus status)
    {
        return status switch
        {
            EntityStatus.Online => "bg-green-400",
            EntityStatus.Offline => "bg-gray-400",
            EntityStatus.Degraded => "bg-yellow-400",
            EntityStatus.Maintenance => "bg-blue-400",
            EntityStatus.Error => "bg-red-400",
            _ => "bg-gray-400"
        };
    }

    // Badge classes for entity status
    private string GetEntityStatusBadgeClass(EntityStatus status)
    {
        return status switch
        {
            EntityStatus.Online => "bg-green-100 text-green-800",
            EntityStatus.Offline => "bg-gray-100 text-gray-800",
            EntityStatus.Degraded => "bg-yellow-100 text-yellow-800",
            EntityStatus.Maintenance => "bg-blue-100 text-blue-800",
            EntityStatus.Error => "bg-red-100 text-red-800",
            _ => "bg-gray-100 text-gray-800"
        };
    }

    // Badge classes for incident severity
    private string GetSeverityBadgeClass(IncidentSeverity severity)
    {
        return severity switch
        {
            IncidentSeverity.Low => "bg-green-100 text-green-800",
            IncidentSeverity.Medium => "bg-yellow-100 text-yellow-800",
            IncidentSeverity.High => "bg-orange-100 text-orange-800",
            IncidentSeverity.Critical => "bg-red-100 text-red-800",
            _ => "bg-gray-100 text-gray-800"
        };
    }

    // Badge classes for incident status
    private string GetIncidentStatusBadgeClass(IncidentStatus status)
    {
        return status switch
        {
            IncidentStatus.Open => "bg-red-100 text-red-800",
            IncidentStatus.Investigating => "bg-yellow-100 text-yellow-800",
            IncidentStatus.Identified => "bg-orange-100 text-orange-800",
            IncidentStatus.Monitoring => "bg-blue-100 text-blue-800",
            IncidentStatus.Resolved => "bg-green-100 text-green-800",
            _ => "bg-gray-100 text-gray-800"
        };
    }

    // Border classes for incident cards
    private string GetIncidentBorderClass(IncidentSeverity severity)
    {
        return severity switch
        {
            IncidentSeverity.Critical => "border-l-4 border-l-red-500",
            IncidentSeverity.High => "border-l-4 border-l-orange-500",
            IncidentSeverity.Medium => "border-l-4 border-l-yellow-500",
            _ => "border-l-4 border-l-green-500"
        };
    }

    // Group status based on worst entity status in the group
    private string GetGroupStatusBadgeClass(List<Entity> groupEntities)
    {
        if (!groupEntities.Any()) return "bg-gray-100 text-gray-800";

        var hasError = groupEntities.Any(e => GetEntityStatus(e) == EntityStatus.Error);
        var hasDegraded = groupEntities.Any(e => GetEntityStatus(e) == EntityStatus.Degraded);
        var hasOffline = groupEntities.Any(e => GetEntityStatus(e) == EntityStatus.Offline);

        if (hasError) return "bg-red-100 text-red-800";
        if (hasDegraded) return "bg-yellow-100 text-yellow-800";
        if (hasOffline) return "bg-gray-100 text-gray-800";
        
        return "bg-green-100 text-green-800";
    }

    private string GetGroupStatusText(List<Entity> groupEntities)
    {
        if (!groupEntities.Any()) return "No Entities";

        var hasError = groupEntities.Any(e => GetEntityStatus(e) == EntityStatus.Error);
        var hasDegraded = groupEntities.Any(e => GetEntityStatus(e) == EntityStatus.Degraded);
        var hasOffline = groupEntities.Any(e => GetEntityStatus(e) == EntityStatus.Offline);

        if (hasError) return "Issues Detected";
        if (hasDegraded) return "Degraded Performance";
        if (hasOffline) return "Some Offline";
        
        return "All Systems Operational";
    }

    private string GetSeverityText(IncidentSeverity severity)
    {
        return severity switch
        {
            IncidentSeverity.Low => "Low",
            IncidentSeverity.Medium => "Medium",
            IncidentSeverity.High => "High",
            IncidentSeverity.Critical => "Critical",
            _ => "Unknown"
        };
    }

    private string GetIncidentStatusText(IncidentStatus status)
    {
        return status switch
        {
            IncidentStatus.Open => "Open",
            IncidentStatus.Investigating => "Investigating",
            IncidentStatus.Identified => "Identified",
            IncidentStatus.Monitoring => "Monitoring",
            IncidentStatus.Resolved => "Resolved",
            _ => "Unknown"
        };
    }

    private string GetEntityStatusText(Entity entity)
    {
        var status = GetEntityStatus(entity);
        return status switch
        {
            EntityStatus.Online => "Online",
            EntityStatus.Offline => "Offline",
            EntityStatus.Degraded => "Degraded",
            EntityStatus.Maintenance => "Maintenance",
            EntityStatus.Error => "Error",
            _ => "Unknown"
        };
    }

    private void ToggleIncidentUpdates(string incidentId)
    {
        SelectedIncidentId = SelectedIncidentId == incidentId ? null : incidentId;
    }

    private void ToggleEntityDetails(string entityId)
    {
        SelectedEntityId = SelectedEntityId == entityId ? null : entityId;
    }
}
