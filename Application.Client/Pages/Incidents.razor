@page "/incidents"
@using Application.Shared.Enums
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))
@inject HttpClient _httpClient
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@attribute [Authorize]

<PageTitle>Incidents</PageTitle>

<div class="min-h-screen bg-gray-50">
    <!-- Header -->
    <div class="bg-white border-b border-gray-200">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <div class="py-6 md:flex md:items-center md:justify-between">
                <div class="flex-1 min-w-0">
                    <h1 class="text-2xl font-bold leading-7 text-gray-900 sm:text-3xl sm:truncate">
                        Incidents
                    </h1>
                    <p class="mt-1 text-sm text-gray-500">
                        Track and manage system incidents across all entities
                    </p>
                </div>
                <div class="mt-4 flex md:mt-0 md:ml-4">
                    <button @onclick="ShowActiveOnly" 
                            class="inline-flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50">
                        @if (activeOnly)
                        {
                            <span>Show All</span>
                        }
                        else
                        {
                            <span>Active Only</span>
                        }
                    </button>
                    <button @onclick="CreateIncident" 
                            class="ml-3 inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-red-600 hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500">
                        <svg class="-ml-1 mr-2 h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                        </svg>
                        Report Incident
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Filter Bar -->
    <div class="bg-white border-b border-gray-200">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4">
            <div class="flex flex-wrap gap-4">
                <!-- Search -->
                <div class="flex-1 min-w-0">
                    <div class="relative">
                        <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                            <svg class="h-5 w-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
                            </svg>
                        </div>
                        <input @bind="searchTerm" @bind:event="oninput" @onkeyup="OnSearchChanged"
                               type="text" 
                               placeholder="Search incidents..."
                               class="block w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md leading-5 bg-white placeholder-gray-500 focus:outline-none focus:placeholder-gray-400 focus:ring-1 focus:ring-red-500 focus:border-red-500 sm:text-sm">
                    </div>
                </div>

                <!-- Severity Filter -->
                <div class="flex-shrink-0">
                    <select @bind="selectedSeverity" @bind:after="OnFiltersChanged"
                            class="block w-full pl-3 pr-10 py-2 text-base border border-gray-300 focus:outline-none focus:ring-red-500 focus:border-red-500 sm:text-sm rounded-md">
                        <option value="">All Severities</option>
                        <option value="@IncidentSeverity.Low">Low</option>
                        <option value="@IncidentSeverity.Medium">Medium</option>
                        <option value="@IncidentSeverity.High">High</option>
                        <option value="@IncidentSeverity.Critical">Critical</option>
                    </select>
                </div>

                <!-- Status Filter -->
                <div class="flex-shrink-0">
                    <select @bind="selectedStatus" @bind:after="OnFiltersChanged"
                            class="block w-full pl-3 pr-10 py-2 text-base border border-gray-300 focus:outline-none focus:ring-red-500 focus:border-red-500 sm:text-sm rounded-md">
                        <option value="">All Statuses</option>
                        <option value="@IncidentStatus.Open">Open</option>
                        <option value="@IncidentStatus.Investigating">Investigating</option>
                        <option value="@IncidentStatus.Identified">Identified</option>
                        <option value="@IncidentStatus.Monitoring">Monitoring</option>
                        <option value="@IncidentStatus.Resolved">Resolved</option>
                    </select>
                </div>
            </div>
        </div>
    </div>

    <!-- Main Content -->
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
        @if (isLoading)
        {
            <div class="flex justify-center items-center h-64">
                <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-red-600"></div>
            </div>
        }
        else if (filteredIncidents?.Any() == true)
        {
            <!-- Incidents Table -->
            <div class="bg-white shadow overflow-hidden sm:rounded-md">
                <ul class="divide-y divide-gray-200">
                    @foreach (var incident in filteredIncidents)
                    {
                        <li class="hover:bg-gray-50 cursor-pointer" @onclick="() => ViewIncident(incident.Id)">
                            <div class="px-4 py-4 sm:px-6">
                                <div class="flex items-center justify-between">
                                    <div class="flex-1 min-w-0">
                                        <div class="flex items-center">
                                            <span class="text-lg mr-2">@incident.GetSeverityIcon()</span>
                                            <div>
                                                <p class="text-sm font-medium text-gray-900 truncate">
                                                    @incident.Title
                                                </p>
                                                <p class="text-sm text-gray-500 truncate">
                                                    @incident.Entity?.Name
                                                </p>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="flex items-center space-x-4">
                                        <div class="flex flex-col items-end">
                                            <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium @incident.GetSeverityClass()">
                                                @incident.Severity
                                            </span>
                                            <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium @incident.GetStatusClass() mt-1">
                                                @incident.Status
                                            </span>
                                        </div>
                                        <div class="text-right">
                                            <p class="text-sm text-gray-900">
                                                @incident.StartedAt.Value.ToString("MMM dd, yyyy")
                                            </p>
                                            <p class="text-sm text-gray-500">
                                                @if (incident.IsResolved)
                                                {
                                                    <span>Resolved</span>
                                                }
                                                else
                                                {
                                                    <span>@FormatDuration(incident.Duration)</span>
                                                }
                                            </p>
                                        </div>
                                        <div class="flex-shrink-0">
                                            <svg class="h-5 w-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                                            </svg>
                                        </div>
                                    </div>
                                </div>
                                <div class="mt-2">
                                    <p class="text-sm text-gray-600">
                                        @incident.Description.Take(100) + (incident.Description.Length > 100 ? "..." : "")
                                    </p>
                                </div>
                            </div>
                        </li>
                    }
                </ul>
            </div>
        }
        else
        {
            <div class="text-center py-12">
                <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                </svg>
                <h3 class="mt-2 text-sm font-medium text-gray-900">No incidents found</h3>
                <p class="mt-1 text-sm text-gray-500">
                    @if (activeOnly)
                    {
                        <span>No active incidents to display.</span>
                    }
                    else
                    {
                        <span>Get started by reporting your first incident.</span>
                    }
                </p>
                <div class="mt-6">
                    <button @onclick="CreateIncident" 
                            class="inline-flex items-center px-4 py-2 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-red-600 hover:bg-red-700">
                        <svg class="-ml-1 mr-2 h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                        </svg>
                        Report Incident
                    </button>
                </div>
            </div>
        }
    </div>
</div>

@code {
    [SupplyParameterFromQuery(Name = "w")] public string? WorkspaceId { get; set; }
    private List<Incident>? incidents;
    private List<Incident>? filteredIncidents;
    private bool isLoading = true;
    private string searchTerm = string.Empty;
    private string? selectedSeverity;
    private string? selectedStatus;
    private bool activeOnly = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadIncidents();
    }

    private async Task LoadIncidents()
    {
        // Add workspace header
        if (!_httpClient.DefaultRequestHeaders.Contains("X-Workspace-ID"))
        {
            _httpClient.DefaultRequestHeaders.Add("X-Workspace-ID", WorkspaceId ?? "default-workspace");
        }


        try
        {
            isLoading = true;
            var response = await _httpClient.GetAsync("api/incidents");
            
            if (response.IsSuccessStatusCode)
            {
                incidents = await response.Content.ReadFromJsonAsync<List<Incident>>();
                ApplyFilters();
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", "Error loading incidents:", ex.Message);
        }
        finally
        {
            isLoading = false;
        }
    }

    private void ApplyFilters()
    {
        if (incidents == null)
        {
            filteredIncidents = new List<Incident>();
            return;
        }

        var filtered = incidents.AsEnumerable();

        // Apply active filter
        if (activeOnly)
        {
            filtered = filtered.Where(i => i.Status != IncidentStatus.Resolved);
        }

        // Apply search filter
        if (!string.IsNullOrWhiteSpace(searchTerm))
        {
            var search = searchTerm.ToLowerInvariant();
            filtered = filtered.Where(i => 
                i.Title.ToLowerInvariant().Contains(search) ||
                i.Description.ToLowerInvariant().Contains(search) ||
                (i.Entity?.Name?.ToLowerInvariant().Contains(search) ?? false));
        }

        // Apply severity filter
        if (!string.IsNullOrEmpty(selectedSeverity) && Enum.TryParse<IncidentSeverity>(selectedSeverity, out var severity))
        {
            filtered = filtered.Where(i => i.Severity == severity);
        }

        // Apply status filter
        if (!string.IsNullOrEmpty(selectedStatus) && Enum.TryParse<IncidentStatus>(selectedStatus, out var status))
        {
            filtered = filtered.Where(i => i.Status == status);
        }

        filteredIncidents = filtered.OrderByDescending(i => i.StartedAt).ToList();
    }

    private async Task OnSearchChanged(KeyboardEventArgs e)
    {
        ApplyFilters();
        await Task.CompletedTask;
    }

    private void OnFiltersChanged()
    {
        ApplyFilters();
    }

    private async Task ShowActiveOnly()
    {
        activeOnly = !activeOnly;
        ApplyFilters();
        await Task.CompletedTask;
    }

    private void CreateIncident()
    {
        Navigation.NavigateTo("/incidents/create");
    }

    private void ViewIncident(string incidentId)
    {
        Navigation.NavigateTo($"/incidents/{incidentId}");
    }

    private string FormatDuration(TimeSpan? duration)
    {
        if (!duration.HasValue) return "0m";

        var d = duration.Value;
        if (d.TotalDays >= 1)
            return $"{(int)d.TotalDays}d {d.Hours}h";
        if (d.TotalHours >= 1)
            return $"{(int)d.TotalHours}h {d.Minutes}m";
        
        return $"{(int)d.TotalMinutes}m";
    }
}
