@page "/entities/{EntityId}/dependencies"
@using Application.Shared.Models
@using Application.Shared.Services
@using Application.Shared.Enums
@using Microsoft.AspNetCore.Components.Forms
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))
@inject HttpClient _httpClient
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@attribute [Authorize]

<PageTitle>Manage Dependencies - @(entity?.Name ?? "Loading...")</PageTitle>

<div class="min-h-screen bg-gray-50">
    @if (isLoading)
    {
        <div class="flex justify-center items-center h-64">
            <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600"></div>
        </div>
    }
    else if (entity == null)
    {
        <div class="text-center py-12">
            <h3 class="text-lg font-medium text-gray-900">Entity not found</h3>
            <p class="mt-2 text-sm text-gray-500">The entity you're looking for doesn't exist.</p>
            <div class="mt-6">
                <button @onclick="BackToEntities" 
                        class="inline-flex items-center px-4 py-2 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700">
                    Back to Entities
                </button>
            </div>
        </div>
    }
    else
    {
        <!-- Header -->
        <div class="bg-white border-b border-gray-200">
            <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
                <div class="py-6">
                    <nav class="flex" aria-label="Breadcrumb">
                        <ol class="flex items-center space-x-4">
                            <li>
                                <div>
                                    <button @onclick="BackToEntities" class="text-gray-400 hover:text-gray-500">
                                        <svg class="flex-shrink-0 h-5 w-5" fill="currentColor" viewBox="0 0 20 20">
                                            <path fill-rule="evenodd" d="M9.707 14.707a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 1.414L7.414 9H15a1 1 0 110 2H7.414l2.293 2.293a1 1 0 010 1.414z" clip-rule="evenodd"></path>
                                        </svg>
                                        <span class="sr-only">Back</span>
                                    </button>
                                </div>
                            </li>
                            <li>
                                <div class="flex items-center">
                                    <svg class="flex-shrink-0 h-5 w-5 text-gray-300" fill="currentColor" viewBox="0 0 20 20">
                                        <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 111.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd"></path>
                                    </svg>
                                    <button @onclick="BackToEntities" class="ml-4 text-sm font-medium text-gray-500 hover:text-gray-700">
                                        Entities
                                    </button>
                                </div>
                            </li>
                            <li>
                                <div class="flex items-center">
                                    <svg class="flex-shrink-0 h-5 w-5 text-gray-300" fill="currentColor" viewBox="0 0 20 20">
                                        <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 111.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd"></path>
                                    </svg>
                                    <button @onclick="BackToEntity" class="ml-4 text-sm font-medium text-gray-500 hover:text-gray-700">
                                        @entity.Name
                                    </button>
                                </div>
                            </li>
                            <li>
                                <div class="flex items-center">
                                    <svg class="flex-shrink-0 h-5 w-5 text-gray-300" fill="currentColor" viewBox="0 0 20 20">
                                        <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 111.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd"></path>
                                    </svg>
                                    <span class="ml-4 text-sm font-medium text-gray-500">Dependencies</span>
                                </div>
                            </li>
                        </ol>
                    </nav>
                    <div class="mt-2 md:flex md:items-center md:justify-between">
                        <div class="flex-1 min-w-0">
                            <h1 class="text-2xl font-bold leading-7 text-gray-900 sm:text-3xl sm:truncate">
                                Manage Dependencies
                            </h1>
                            <p class="mt-1 text-sm text-gray-500">
                                Configure dependencies for <strong>@entity.Name</strong>
                            </p>
                        </div>
                        <div class="mt-4 flex md:mt-0 md:ml-4">
                            <button @onclick="ShowAddDependencyForm" 
                                    class="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                                <svg class="-ml-1 mr-2 h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                                </svg>
                                Add Dependency
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Main Content -->
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
            <div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
                <!-- Dependencies List -->
                <div class="lg:col-span-2">
                    <div class="bg-white shadow rounded-lg">
                        <div class="px-6 py-5 border-b border-gray-200">
                            <h3 class="text-lg leading-6 font-medium text-gray-900">
                                Current Dependencies (@(entity.Dependencies?.Count ?? 0))
                            </h3>
                            <p class="mt-1 text-sm text-gray-500">
                                These entities must be available for @entity.Name to function properly
                            </p>
                        </div>
                        
                        <div class="divide-y divide-gray-200">
                            @if (entity.Dependencies?.Any() == true)
                            {
                                @foreach (var dependency in entity.Dependencies.OrderBy(d => d.Order))
                                {
                                    <div class="px-6 py-4 hover:bg-gray-50">
                                        <div class="flex items-center justify-between">
                                            <div class="flex-1">
                                                <div class="flex items-center">
                                                    <div class="flex-shrink-0">
                                                        <span class="w-3 h-3 bg-blue-500 rounded-full inline-block"></span>
                                                    </div>
                                                    <div class="ml-3">
                                                        <div class="flex items-center">
                                                            <span class="text-sm font-medium text-gray-900">
                                                                @dependency.DependsOnEntity?.Name
                                                            </span>
                                                            @if (dependency.IsCritical)
                                                            {
                                                                <span class="ml-2 inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium bg-red-100 text-red-800">
                                                                    <svg class="w-3 h-3 mr-1" fill="currentColor" viewBox="0 0 20 20">
                                                                        <path fill-rule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clip-rule="evenodd"></path>
                                                                    </svg>
                                                                    Critical
                                                                </span>
                                                            }
                                                            @if (!dependency.IsActive)
                                                            {
                                                                <span class="ml-2 inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800">
                                                                    Inactive
                                                                </span>
                                                            }
                                                        </div>
                                                        @if (!string.IsNullOrEmpty(dependency.Description))
                                                        {
                                                            <p class="mt-1 text-sm text-gray-500">@dependency.Description</p>
                                                        }
                                                        <div class="mt-2 flex items-center text-xs text-gray-500 space-x-4">
                                                            @if (!string.IsNullOrEmpty(dependency.DependencyType.ToString()))
                                                            {
                                                                <span>Type: @dependency.DependencyType</span>
                                                            }
                                                            <span>Order: @dependency.Order</span>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="flex items-center space-x-2">
                                                <button @onclick="() => EditDependency(dependency)" 
                                                        class="text-blue-600 hover:text-blue-800 text-sm font-medium">
                                                    Edit
                                                </button>
                                                <button @onclick="() => DeleteDependency(dependency)" 
                                                        class="text-red-600 hover:text-red-800 text-sm font-medium">
                                                    Delete
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                }
                            }
                            else
                            {
                                <div class="px-6 py-8 text-center">
                                    <svg class="mx-auto h-8 w-8 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1"></path>
                                    </svg>
                                    <h3 class="mt-2 text-sm font-medium text-gray-900">No dependencies</h3>
                                    <p class="mt-1 text-sm text-gray-500">This entity has no configured dependencies.</p>
                                    <div class="mt-6">
                                        <button @onclick="ShowAddDependencyForm" 
                                                class="inline-flex items-center px-4 py-2 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700">
                                            <svg class="-ml-1 mr-2 h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                                            </svg>
                                            Add First Dependency
                                        </button>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>

                    <!-- Dependency Tree -->
                    <div class="bg-white shadow rounded-lg mt-6">
                        <div class="px-6 py-5 border-b border-gray-200">
                            <h3 class="text-lg leading-6 font-medium text-gray-900">
                                Dependency Tree
                            </h3>
                            <p class="mt-1 text-sm text-gray-500">
                                Complete dependency hierarchy showing all layers of dependencies and dependents
                            </p>
                        </div>
                        
                        <div class="p-6">
                            @if (dependencyTree != null)
                            {
                                <div class="space-y-6">
                                    <!-- Upstream Dependencies (What this entity depends on) -->
                                    @if (dependencyTree.Dependencies?.Any() == true)
                                    {
                                        <div>
                                            <h4 class="text-md font-semibold text-gray-900 mb-3 flex items-center">
                                                <svg class="w-5 h-5 mr-2 text-red-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 7l5 5m0 0l-5 5m5-5H6"></path>
                                                </svg>
                                                Upstream Dependencies (@dependencyTree.Dependencies.Count)
                                            </h4>
                                            <p class="text-sm text-gray-600 mb-4">Entities that @entity.Name depends on:</p>
                                            <div class="ml-4">
                                                @foreach (var dep in dependencyTree.Dependencies)
                                                {
                                                    @RenderDependencyNode(dep, true, 0)
                                                }
                                            </div>
                                        </div>
                                    }

                                    <!-- Current Entity -->
                                    <div class="text-center py-4">
                                        <div class="inline-flex items-center px-4 py-2 rounded-lg bg-blue-50 border-2 border-blue-200">
                                            <span class="w-3 h-3 @GetStatusColor(dependencyTree.CurrentStatus) rounded-full mr-3"></span>
                                            <span class="font-semibold text-blue-900">@dependencyTree.EntityName</span>
                                            <span class="ml-2 text-xs px-2 py-1 bg-blue-100 text-blue-700 rounded">@dependencyTree.EntityType</span>
                                        </div>
                                    </div>

                                    <!-- Downstream Dependents (What depends on this entity) -->
                                    @if (dependencyTree.Dependents?.Any() == true)
                                    {
                                        <div>
                                            <h4 class="text-md font-semibold text-gray-900 mb-3 flex items-center">
                                                <svg class="w-5 h-5 mr-2 text-green-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 17l-5-5m0 0l5-5m-5 5h12"></path>
                                                </svg>
                                                Downstream Dependents (@dependencyTree.Dependents.Count)
                                            </h4>
                                            <p class="text-sm text-gray-600 mb-4">Entities that depend on @entity.Name:</p>
                                            <div class="ml-4">
                                                @foreach (var dep in dependencyTree.Dependents)
                                                {
                                                    @RenderDependencyNode(dep, false, 0)
                                                }
                                            </div>
                                        </div>
                                    }

                                    @if (dependencyTree.Dependencies?.Any() != true && dependencyTree.Dependents?.Any() != true)
                                    {
                                        <div class="text-center py-8">
                                            <svg class="mx-auto h-8 w-8 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>
                                            </svg>
                                            <h3 class="mt-2 text-sm font-medium text-gray-900">No dependency tree</h3>
                                            <p class="mt-1 text-sm text-gray-500">This entity has no dependencies or dependents configured.</p>
                                        </div>
                                    }
                                </div>
                            }
                            else if (isLoadingTree)
                            {
                                <div class="flex justify-center items-center py-8">
                                    <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
                                    <span class="ml-2 text-sm text-gray-600">Loading dependency tree...</span>
                                </div>
                            }
                        </div>
                    </div>
                </div>

                <!-- Add/Edit Dependency Form -->
                <div class="lg:col-span-1">
                    @if (showDependencyForm)
                    {
                        <div class="bg-white shadow rounded-lg">
                            <div class="px-6 py-5 border-b border-gray-200">
                                <h3 class="text-lg leading-6 font-medium text-gray-900">
                                    @(editingDependency != null ? "Edit Dependency" : "Add Dependency")
                                </h3>
                            </div>
                            <div class="px-6 py-5">
                                <EditForm Model="@dependencyForm" OnValidSubmit="@HandleDependencySubmit">
                                    <DataAnnotationsValidator />
                                    
                                    <div class="space-y-4">
                                        <!-- Entity Selection -->
                                        <div>
                                            <label for="dependsOnEntityId" class="block text-sm font-medium text-gray-700">
                                                Depends On Entity <span class="text-red-500">*</span>
                                            </label>
                                            <div class="mt-1">
                                                <InputSelect @bind-Value="dependencyForm.DependsOnEntityId" id="dependsOnEntityId" 
                                                             class="block w-full border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm">
                                                    <option value="">Select entity...</option>
                                                    @foreach (var availableEntity in availableEntities)
                                                    {
                                                        <option value="@availableEntity.Id">@availableEntity.Name (@availableEntity.EntityType)</option>
                                                    }
                                                </InputSelect>
                                                <ValidationMessage For="@(() => dependencyForm.DependsOnEntityId)" class="mt-2 text-sm text-red-600" />
                                            </div>
                                        </div>

                                        <!-- Description -->
                                        <div>
                                            <label for="dependencyDescription" class="block text-sm font-medium text-gray-700">
                                                Description
                                            </label>
                                            <div class="mt-1">
                                                <InputTextArea @bind-Value="dependencyForm.Description" id="dependencyDescription" rows="2"
                                                               class="block w-full border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm" 
                                                               placeholder="Describe this dependency..." />
                                            </div>
                                        </div>

                                        <!-- Dependency Type -->
                                        <div>
                                            <label for="dependencyType" class="block text-sm font-medium text-gray-700">
                                                Type
                                            </label>
                                            <div class="mt-1">
                                                <select @bind="dependencyForm.DependencyType" id="entityType"
                                                        class="block w-full border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm" required>
                                                    <option value="">Select type...</option>
                                                    @foreach (var entityType in Enum.GetValues<EntityType>())
                                                    {
                                                        <option value="@entityType">@entityType.ToString()</option>
                                                    }
                                                </select>
                                            </div>
                                        </div>

                                        <!-- Order -->
                                        <div>
                                            <label for="dependencyOrder" class="block text-sm font-medium text-gray-700">
                                                Check Order
                                            </label>
                                            <div class="mt-1">
                                                <InputNumber @bind-Value="dependencyForm.Order" id="dependencyOrder"
                                                             class="block w-full border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm" />
                                                <p class="mt-1 text-xs text-gray-500">Lower numbers are checked first</p>
                                            </div>
                                        </div>

                                        <!-- Flags -->
                                        <div class="space-y-3">
                                            <div class="flex items-center">
                                                <InputCheckbox @bind-Value="dependencyForm.IsActive" id="dependencyIsActive" 
                                                               class="h-4 w-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500" />
                                                <label for="dependencyIsActive" class="ml-3 text-sm text-gray-700">
                                                    Active
                                                </label>
                                            </div>
                                            <div class="flex items-center">
                                                <InputCheckbox @bind-Value="dependencyForm.IsCritical" id="dependencyIsCritical" 
                                                               class="h-4 w-4 text-red-600 border-gray-300 rounded focus:ring-red-500" />
                                                <label for="dependencyIsCritical" class="ml-3 text-sm text-gray-700">
                                                    Critical
                                                    <span class="text-gray-500">(Failure will impact entity)</span>
                                                </label>
                                            </div>
                                        </div>
                                    </div>

                                    <!-- Form Actions -->
                                    <div class="mt-6 flex justify-end space-x-3">
                                        <button type="button" @onclick="CancelDependencyForm" 
                                                class="bg-white py-2 px-4 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 hover:bg-gray-50">
                                            Cancel
                                        </button>
                                        <button type="submit" disabled="@isSubmittingDependency"
                                                class="inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 disabled:bg-blue-300">
                                            @if (isSubmittingDependency)
                                            {
                                                <svg class="animate-spin -ml-1 mr-2 h-4 w-4 text-white" fill="none" viewBox="0 0 24 24">
                                                    <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                                                    <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                                                </svg>
                                                @(editingDependency != null ? "Updating..." : "Adding...")
                                            }
                                            else
                                            {
                                                @(editingDependency != null ? "Update" : "Add")
                                            }
                                        </button>
                                    </div>
                                </EditForm>
                            </div>
                        </div>
                    }
                    else
                    {
                        <!-- Info Panel -->
                        <div class="bg-white shadow rounded-lg">
                            <div class="px-6 py-5">
                                <h3 class="text-lg leading-6 font-medium text-gray-900 mb-4">About Dependencies</h3>
                                <div class="prose prose-sm text-gray-500">
                                    <p>Dependencies define other entities that this entity relies on to function correctly.</p>
                                    <ul class="mt-4 space-y-2">
                                        <li><strong>Critical:</strong> Failure will significantly impact this entity</li>
                                        <li><strong>Order:</strong> Lower numbers are checked first during monitoring</li>
                                        <li><strong>Active:</strong> Whether this dependency is currently being monitored</li>
                                    </ul>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    }
</div>

@code {
    [Parameter] public string EntityId { get; set; } = string.Empty;
    [SupplyParameterFromQuery(Name = "w")] public string? WorkspaceId { get; set; }

    private Entity? entity;
    private List<Entity> availableEntities = new();
    private DependencyTree? dependencyTree;
    private bool isLoading = true;
    private bool isLoadingTree = false;
    private bool showDependencyForm = false;
    private bool isSubmittingDependency = false;
    private EntityDependency dependencyForm = new();
    private EntityDependency? editingDependency = null;

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(EntityId))
        {
            await LoadData();
        }
    }

    private async Task LoadData()
    {
        try
        {
            // Load the main entity
            entity = await _httpClient.GetFromJsonAsync<Entity>($"api/entities/{EntityId}");

            // Load available entities for dependency selection (excluding the current entity)
            if (entity?.WorkspaceId != null)
            {
                var allEntities = await _httpClient.GetFromJsonAsync<List<Entity>>($"api/entities");
                if (allEntities != null)
                {
                    availableEntities = allEntities.Where(e => e.Id != entity.Id).ToList();
                }
            }

            // Load dependency tree
            await LoadDependencyTree();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading data: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadDependencyTree()
    {
        if (string.IsNullOrEmpty(EntityId)) return;

        try
        {
            isLoadingTree = true;
            dependencyTree = await _httpClient.GetFromJsonAsync<DependencyTree>($"api/entities/{EntityId}/dependency-tree");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading dependency tree: {ex.Message}");
        }
        finally
        {
            isLoadingTree = false;
        }
    }

    private void ShowAddDependencyForm()
    {
        editingDependency = null;
        dependencyForm = new EntityDependency
        {
            EntityId = EntityId,
            IsActive = true,
            IsCritical = false,
            Order = (entity?.Dependencies?.Count ?? 0) + 1
        };
        showDependencyForm = true;
    }

    private void EditDependency(EntityDependency dependency)
    {
        editingDependency = dependency;
        dependencyForm = new EntityDependency
        {
            Id = dependency.Id,
            EntityId = dependency.EntityId,
            DependsOnEntityId = dependency.DependsOnEntityId,
            Description = dependency.Description,
            DependencyType = dependency.DependencyType,
            Order = dependency.Order,
            IsActive = dependency.IsActive,
            IsCritical = dependency.IsCritical
        };
        showDependencyForm = true;
    }

    private void CancelDependencyForm()
    {
        showDependencyForm = false;
        editingDependency = null;
        dependencyForm = new EntityDependency();
    }

    private async Task HandleDependencySubmit()
    {
        if (isSubmittingDependency) return;

        isSubmittingDependency = true;

        dependencyForm.WorkspaceId = entity?.WorkspaceId;
        Console.WriteLine($"--- Workspace ID: {entity?.WorkspaceId}");

        try
        {
            if (editingDependency != null)
            {
                // Update existing dependency
                // await EntityService.UpdateEntityDependencyAsync(dependencyForm);
                await _httpClient.PutAsJsonAsync($"api/entities/dependencies/{dependencyForm.Id}", dependencyForm);
                await JSRuntime.InvokeVoidAsync("alert", "Dependency updated successfully!");
            }
            else
            {
                // Create new dependency
                // await EntityService.CreateEntityDependencyAsync(dependencyForm);
                await _httpClient.PostAsJsonAsync($"api/entities/dependencies", dependencyForm);
                await JSRuntime.InvokeVoidAsync("alert", "Dependency added successfully!");
            }
            
            CancelDependencyForm();
            await LoadData(); // Refresh the data
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving dependency: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", $"Error saving dependency: {ex.Message}");
        }
        finally
        {
            isSubmittingDependency = false;
        }
    }

    private async Task DeleteDependency(EntityDependency dependency)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to remove this dependency on '{dependency.DependsOnEntity?.Name}'?");
        if (confirmed)
        {
            try
            {
                // await EntityService.DeleteEntityDependencyAsync(dependency.Id);
                await _httpClient.DeleteAsync($"api/entities/dependencies/{dependency.Id}");
                await JSRuntime.InvokeVoidAsync("alert", "Dependency removed successfully!");
                await LoadData(); // Refresh the data
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error deleting dependency: {ex.Message}");
                await JSRuntime.InvokeVoidAsync("alert", "Error removing dependency. Please try again.");
            }
        }
    }

    private void BackToEntities()
    {
        Navigation.NavigateTo("/entities");
    }

    private void BackToEntity()
    {
        Navigation.NavigateTo($"/entities/{EntityId}");
    }

    private string GetStatusColor(EntityStatus status)
    {
        return status switch
        {
            EntityStatus.Online => "bg-green-500",
            EntityStatus.Offline => "bg-red-500",
            EntityStatus.Degraded => "bg-yellow-500",
            EntityStatus.Maintenance => "bg-blue-500",
            _ => "bg-gray-500"
        };
    }

    private RenderFragment RenderDependencyNode(DependencyTreeNode node, bool isUpstream, int depth)
    {
        return @<div class="@($"ml-{depth * 4} mb-2")">
            <div class="flex items-center p-3 border border-gray-200 rounded-lg bg-gray-50">
                <div class="flex items-center flex-1">
                    <span class="w-3 h-3 @GetStatusColor(node.CurrentStatus) rounded-full mr-3"></span>
                    <div class="flex-1">
                        <div class="flex items-center">
                            <span class="text-sm font-medium text-gray-900">@node.EntityName</span>
                            @if (node.IsCritical)
                            {
                                <span class="ml-2 inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium bg-red-100 text-red-800">
                                    Critical
                                </span>
                            }
                            @if (!node.IsActive)
                            {
                                <span class="ml-2 inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800">
                                    Inactive
                                </span>
                            }
                        </div>
                        @if (!string.IsNullOrEmpty(node.Description))
                        {
                            <p class="text-xs text-gray-500 mt-1">@node.Description</p>
                        }
                        <div class="flex items-center text-xs text-gray-500 space-x-2 mt-1">
                            <span>@node.EntityType</span>
                            <span>•</span>
                            <span>Level @(node.Level + 1)</span>
                            @if (node.Order > 0)
                            {
                                <span>•</span>
                                <span>Order @node.Order</span>
                            }
                        </div>
                    </div>
                </div>
                <div class="text-xs text-gray-400">
                    @if (isUpstream)
                    {
                        <span>↗️ Depends on</span>
                    }
                    else
                    {
                        <span>↙️ Dependent</span>
                    }
                </div>
            </div>
            
            @if (node.Children?.Any() == true)
            {
                <div class="mt-2 ml-4 border-l-2 border-gray-200 pl-4">
                    @foreach (var child in node.Children)
                    {
                        @RenderDependencyNode(child, isUpstream, depth + 1)
                    }
                </div>
            }
        </div>;
    }
}
