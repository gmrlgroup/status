@using Application.Shared.Models
@using Application.Shared.Enums
@using Application.Client.Services
@inject EntityStatusHistoryClientService StatusHistoryService

<div class="mt-4 pt-4 border-t border-gray-200">
    <div class="flex items-center justify-between mb-4">
        <h4 class="font-medium text-gray-700 flex items-center">
            <svg class="w-4 h-4 mr-2 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
            </svg>
            Status History
        </h4>
        <div class="flex items-center space-x-2">
            <select @bind="SelectedDays" @bind:after="LoadStatusHistory" 
                    class="text-xs border border-gray-300 rounded px-2 py-1">
                <option value="1">Last 24 hours</option>
                <option value="7">Last 7 days</option>
                <option value="30">Last 30 days</option>
                <option value="90">Last 90 days</option>
            </select>
            <button @onclick="RefreshHistory" 
                    class="text-xs text-blue-600 hover:text-blue-800 flex items-center">
                <svg class="w-3 h-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
                </svg>
                Refresh
            </button>
        </div>
    </div>

    @if (IsLoading)
    {
        <div class="flex items-center justify-center py-8">
            <div class="animate-spin rounded-full h-6 w-6 border-b-2 border-blue-600"></div>
            <span class="ml-2 text-sm text-gray-600">Loading status history...</span>
        </div>
    }
    else if (!StatusHistory.Any())
    {
        <div class="text-center py-8">
            <svg class="w-12 h-12 mx-auto text-gray-400 mb-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
            </svg>
            <p class="text-sm text-gray-500">No status history available</p>
        </div>
    }
    else
    {
        <!-- Status Overview Cards -->
        <div class="grid grid-cols-1 sm:grid-cols-6 lg:grid-cols-6 gap-4 sm:gap-6 mb-8">
            <div class="bg-green-50 border border-green-200 rounded-lg p-3">
                <div class="flex items-center">
                    <div class="w-2 h-2 bg-green-400 rounded-full mr-2"></div>
                    <div>
                        <p class="text-xs font-medium text-green-600">Uptime</p>
                        <p class="text-lg font-bold text-green-800">@GetUptimePercentage()%</p>
                    </div>
                </div>
            </div>
            
            <div class="bg-blue-50 border border-blue-200 rounded-lg p-3">
                <div class="flex items-center">
                    <div class="w-2 h-2 bg-blue-400 rounded-full mr-2"></div>
                    <div>
                        <p class="text-xs font-medium text-blue-600">Avg Response</p>
                        <p class="text-lg font-bold text-blue-800">@GetAverageResponseTime()ms</p>
                    </div>
                </div>
            </div>
            
            <div class="bg-gray-50 border border-gray-200 rounded-lg p-3">
                <div class="flex items-center">
                    <div class="w-2 h-2 bg-gray-400 rounded-full mr-2"></div>
                    <div>
                        <p class="text-xs font-medium text-gray-600">Checks</p>
                        <p class="text-lg font-bold text-gray-800">@StatusHistory.Count</p>
                    </div>
                </div>
            </div>
            
            <div class="bg-red-50 border border-red-200 rounded-lg p-3">
                <div class="flex items-center">
                    <div class="w-2 h-2 bg-red-400 rounded-full mr-2"></div>
                    <div>
                        <p class="text-xs font-medium text-red-600">Incidents</p>
                        <p class="text-lg font-bold text-red-800">@GetIncidentCount()</p>
                    </div>
                </div>
            </div>

            <div class="bg-yellow-50 border border-yellow-200 rounded-lg p-3">
                <div class="flex items-center">
                    <div class="w-2 h-2 bg-yellow-400 rounded-full mr-2"></div>
                    <div>
                        <p class="text-xs font-medium text-yellow-600">Degraded</p>
                        <p class="text-lg font-bold text-yellow-800">@GetDegradedCount()</p>
                    </div>
                </div>
            </div>

            <div class="bg-purple-50 border border-purple-200 rounded-lg p-3">
                <div class="flex items-center">
                    <div class="w-2 h-2 bg-purple-400 rounded-full mr-2"></div>
                    <div>
                        <p class="text-xs font-medium text-purple-600">Last Check</p>
                        <p class="text-lg font-bold text-purple-800">@GetLastCheckTime()</p>
                    </div>
                </div>
            </div>
        </div>

        <!-- Status Timeline -->
        <div class="bg-white border border-gray-200 rounded-lg">
            <div class="px-4 py-3 border-b border-gray-200">
                <h5 class="text-sm font-medium text-gray-700">Status Timeline</h5>
            </div>
            
            <!-- Visual Status Bar -->
            <div class="p-4">
                <div class="flex items-center mb-4">
                    <span class="text-xs text-gray-500 mr-2">@GetTimeRangeStart().ToString("MMM dd")</span>
                    <div class="flex-1 h-6 bg-gray-100 rounded-md overflow-hidden">
                        @{
                            var groupedByHour = GetStatusHistoryGroupedByHour();
                        }
                        @foreach (var hourGroup in groupedByHour)
                        {
                            var status = GetDominantStatus(hourGroup.Value);
                            var width = (100.0 / groupedByHour.Count).ToString("F1", System.Globalization.CultureInfo.InvariantCulture);
                            <div class="inline-block h-full @GetStatusBarClass(status)" 
                                 style="width: @(width)%"
                                 title="@hourGroup.Key.ToString("MMM dd HH:mm") - @status">
                            </div>
                        }
                    </div>
                    <span class="text-xs text-gray-500 ml-2">@DateTime.UtcNow.ToString("MMM dd")</span>
                </div>
                
                <!-- Legend -->
                <div class="flex flex-wrap items-center gap-4 text-xs">
                    <div class="flex items-center">
                        <div class="w-3 h-3 bg-green-400 rounded-sm mr-1"></div>
                        <span class="text-gray-600">Online</span>
                    </div>
                    <div class="flex items-center">
                        <div class="w-3 h-3 bg-yellow-400 rounded-sm mr-1"></div>
                        <span class="text-gray-600">Degraded</span>
                    </div>
                    <div class="flex items-center">
                        <div class="w-3 h-3 bg-red-400 rounded-sm mr-1"></div>
                        <span class="text-gray-600">Offline/Error</span>
                    </div>
                    <div class="flex items-center">
                        <div class="w-3 h-3 bg-blue-400 rounded-sm mr-1"></div>
                        <span class="text-gray-600">Maintenance</span>
                    </div>
                    <div class="flex items-center">
                        <div class="w-3 h-3 bg-gray-400 rounded-sm mr-1"></div>
                        <span class="text-gray-600">Unknown</span>
                    </div>
                </div>
            </div>
        </div>

        <!-- Recent Status Changes -->
        <div class="mt-4 bg-white border border-gray-200 rounded-lg">
            <div class="px-4 py-3 border-b border-gray-200">
                <h5 class="text-sm font-medium text-gray-700">Recent Changes</h5>
            </div>
            <div class="divide-y divide-gray-200 max-h-64 overflow-y-auto">
                @{
                    var recentChanges = GetRecentStatusChanges().Take(10);
                }
                @foreach (var entry in recentChanges)
                {
                    <div class="px-4 py-3 hover:bg-gray-50">
                        <div class="flex items-start justify-between">
                            <div class="flex items-start space-x-3">
                                <div class="w-2 h-2 rounded-full mt-1 @GetStatusIndicatorClass(entry.Status)"></div>
                                <div class="flex-1 min-w-0">
                                    <div class="flex items-center space-x-2">
                                        <span class="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium @GetStatusBadgeClass(entry.Status)">
                                            @GetStatusText(entry.Status)
                                        </span>
                                        @if (entry.ResponseTime.HasValue)
                                        {
                                            <span class="text-xs text-gray-500">@entry.ResponseTime.Value.ToString("F0")ms</span>
                                        }
                                    </div>
                                    @if (!string.IsNullOrEmpty(entry.StatusMessage))
                                    {
                                        <p class="text-xs text-gray-600 mt-1">@entry.StatusMessage</p>
                                    }
                                </div>
                            </div>
                            <span class="text-xs text-gray-500 flex-shrink-0">
                                @GetRelativeTime(entry.CheckedAt.Value)
                            </span>
                        </div>
                    </div>
                }
            </div>
        </div>
    }
</div>

@code {
    [Parameter] public string EntityId { get; set; } = string.Empty;
    [Parameter] public string WorkspaceId { get; set; } = string.Empty;

    private List<Application.Shared.Models.EntityStatusHistory> StatusHistory = new();
    private bool IsLoading = true;
    private int SelectedDays = 7;

    protected override async Task OnParametersSetAsync()
    {
        if (!string.IsNullOrEmpty(EntityId))
        {
            await LoadStatusHistory();
        }
    }

    private async Task LoadStatusHistory()
    {
        IsLoading = true;
        StateHasChanged();

        try
        {
            StatusHistory = await StatusHistoryService.GetEntityStatusHistoryAsync(EntityId, WorkspaceId, SelectedDays);
            StatusHistory = StatusHistory.OrderByDescending(s => s.CheckedAt).ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading status history: {ex.Message}");
            StatusHistory = new List<Application.Shared.Models.EntityStatusHistory>();
        }
        finally
        {
            IsLoading = false;
            StateHasChanged();
        }
    }

    private async Task RefreshHistory()
    {
        await LoadStatusHistory();
    }

    private string GetUptimePercentage()
    {
        if (!StatusHistory.Any()) return "0";
        
        var onlineCount = StatusHistory.Count(s => s.Status == EntityStatus.Online);
        var percentage = (double)onlineCount / StatusHistory.Count * 100;
        return percentage.ToString("F1");
    }

    private string GetAverageResponseTime()
    {
        if (!StatusHistory.Any()) return "0";
        
        var validResponseTimes = StatusHistory.Where(s => s.ResponseTime.HasValue).Select(s => s.ResponseTime!.Value);
        if (!validResponseTimes.Any()) return "N/A";
        
        return validResponseTimes.Average().ToString("F0");
    }

    private int GetIncidentCount()
    {
        return StatusHistory.Count(s => s.Status == EntityStatus.Offline || s.Status == EntityStatus.Error);
    }

    private int GetDegradedCount()
    {
        return StatusHistory.Count(s => s.Status == EntityStatus.Degraded);
    }

    private string GetLastCheckTime()
    {
        if (!StatusHistory.Any()) return "N/A";
        
        var lastCheck = StatusHistory.OrderByDescending(s => s.CheckedAt).FirstOrDefault();
        if (lastCheck == null) return "N/A";
        
        var timeSpan = DateTime.UtcNow - lastCheck.CheckedAt.Value;
        
        if (timeSpan.TotalMinutes < 1)
            return "Now";
        if (timeSpan.TotalMinutes < 60)
            return $"{(int)timeSpan.TotalMinutes}m";
        if (timeSpan.TotalHours < 24)
            return $"{(int)timeSpan.TotalHours}h";
        
        return $"{(int)timeSpan.TotalDays}d";
    }

    private DateTime GetTimeRangeStart()
    {
        return DateTime.UtcNow.AddDays(-SelectedDays);
    }

    private Dictionary<DateTime, List<Application.Shared.Models.EntityStatusHistory>> GetStatusHistoryGroupedByHour()
    {
        var startTime = GetTimeRangeStart();
        var endTime = DateTime.UtcNow;
        var totalHours = (int)(endTime - startTime).TotalHours;
        var hoursToShow = Math.Min(totalHours, SelectedDays * 24);

        // Create hour buckets
        var hourBuckets = new Dictionary<DateTime, List<Application.Shared.Models.EntityStatusHistory>>();
        for (int i = 0; i < hoursToShow; i++)
        {
            var hourStart = startTime.AddHours(i);
            var hourKey = new DateTime(hourStart.Year, hourStart.Month, hourStart.Day, hourStart.Hour, 0, 0);
            hourBuckets[hourKey] = new List<Application.Shared.Models.EntityStatusHistory>();
        }

        // Group status history by hour
        foreach (var status in StatusHistory)
        {
            var hourKey = new DateTime(status.CheckedAt.Value.Year, status.CheckedAt.Value.Month, status.CheckedAt.Value.Day, status.CheckedAt.Value.Hour, 0, 0);
            if (hourBuckets.ContainsKey(hourKey))
            {
                hourBuckets[hourKey].Add(status);
            }
        }

        return hourBuckets.OrderBy(x => x.Key).ToDictionary(x => x.Key, x => x.Value);
    }

    private EntityStatus GetDominantStatus(List<Application.Shared.Models.EntityStatusHistory> hourStatuses)
    {
        if (!hourStatuses.Any()) return EntityStatus.Unknown;

        // Priority: Error > Offline > Degraded > Maintenance > Online > Unknown
        if (hourStatuses.Any(s => s.Status == EntityStatus.Error)) return EntityStatus.Error;
        if (hourStatuses.Any(s => s.Status == EntityStatus.Offline)) return EntityStatus.Offline;
        if (hourStatuses.Any(s => s.Status == EntityStatus.Degraded)) return EntityStatus.Degraded;
        if (hourStatuses.Any(s => s.Status == EntityStatus.Maintenance)) return EntityStatus.Maintenance;
        if (hourStatuses.Any(s => s.Status == EntityStatus.Online)) return EntityStatus.Online;
        
        return EntityStatus.Unknown;
    }

    private List<Application.Shared.Models.EntityStatusHistory> GetRecentStatusChanges()
    {
        if (!StatusHistory.Any()) return new List<Application.Shared.Models.EntityStatusHistory>();

        var changes = new List<Application.Shared.Models.EntityStatusHistory>();
        EntityStatus? lastStatus = null;

        foreach (var entry in StatusHistory.OrderBy(s => s.CheckedAt))
        {
            if (lastStatus == null || entry.Status != lastStatus)
            {
                changes.Add(entry);
                lastStatus = entry.Status;
            }
        }

        return changes.OrderByDescending(s => s.CheckedAt).ToList();
    }

    private string GetStatusBarClass(EntityStatus status)
    {
        return status switch
        {
            EntityStatus.Online => "bg-green-400",
            EntityStatus.Offline => "bg-red-400",
            EntityStatus.Degraded => "bg-yellow-400",
            EntityStatus.Maintenance => "bg-blue-400",
            EntityStatus.Error => "bg-red-400",
            _ => "bg-gray-400"
        };
    }

    private string GetStatusIndicatorClass(EntityStatus status)
    {
        return status switch
        {
            EntityStatus.Online => "bg-green-400",
            EntityStatus.Offline => "bg-red-400",
            EntityStatus.Degraded => "bg-yellow-400",
            EntityStatus.Maintenance => "bg-blue-400",
            EntityStatus.Error => "bg-red-400",
            _ => "bg-gray-400"
        };
    }

    private string GetStatusBadgeClass(EntityStatus status)
    {
        return status switch
        {
            EntityStatus.Online => "bg-green-100 text-green-800",
            EntityStatus.Offline => "bg-red-100 text-red-800",
            EntityStatus.Degraded => "bg-yellow-100 text-yellow-800",
            EntityStatus.Maintenance => "bg-blue-100 text-blue-800",
            EntityStatus.Error => "bg-red-100 text-red-800",
            _ => "bg-gray-100 text-gray-800"
        };
    }

    private string GetStatusText(EntityStatus status)
    {
        return status switch
        {
            EntityStatus.Online => "Online",
            EntityStatus.Offline => "Offline",
            EntityStatus.Degraded => "Degraded",
            EntityStatus.Maintenance => "Maintenance",
            EntityStatus.Error => "Error",
            _ => "Unknown"
        };
    }

    private string GetRelativeTime(DateTime dateTime)
    {
        var timeSpan = DateTime.UtcNow - dateTime;
        
        if (timeSpan.TotalMinutes < 1)
            return "Just now";
        if (timeSpan.TotalMinutes < 60)
            return $"{(int)timeSpan.TotalMinutes}m ago";
        if (timeSpan.TotalHours < 24)
            return $"{(int)timeSpan.TotalHours}h ago";
        if (timeSpan.TotalDays < 7)
            return $"{(int)timeSpan.TotalDays}d ago";
        
        return dateTime.ToString("MMM dd, yyyy");
    }
}
